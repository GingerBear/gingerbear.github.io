<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: os, | Neil Ding's Blog]]></title>
  <link href="http://GingerBear.github.io/blog/categories/os/atom.xml" rel="self"/>
  <link href="http://GingerBear.github.io/"/>
  <updated>2013-12-17T16:47:15-05:00</updated>
  <id>http://GingerBear.github.io/</id>
  <author>
    <name><![CDATA[Neil Ding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CS2510: Project 2 - MiniGoogle Final Report]]></title>
    <link href="http://GingerBear.github.io/blog/2013/12/17/cs2510-project-2-minigoogle-final-report/"/>
    <updated>2013-12-17T16:42:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2013/12/17/cs2510-project-2-minigoogle-final-report</id>
    <content type="html"><![CDATA[<p>CS2510: Project 2 &ndash; MiniGoogle Final Report</p>

<h5>Guanxiong Ding (gud7)</h5>

<p>12/17/2013</p>

<h2>General Workflow</h2>

<ul>
<li><p>Indexing workflow</p>

<ul>
<li><p>client send the documents to minigoogle server</p></li>
<li><p>mingoogle server dispatch socket connections to worker by fork a process</p></li>
<li><p>worker lookup mappers and reducers</p></li>
<li><p>worker split the file and send to ma ppers</p></li>
<li><p>each mapper count word for its split</p></li>
<li><p>mapper partition the word count result and send to reducer</p></li>
<li><p>reducer aggregate the result and append to master index files</p></li>
</ul>
</li>
<li><p>Querying workflow</p>

<ul>
<li><p>client send keywords to minigoogle server</p></li>
<li><p>mingoogle server dispatch socket connections to worker by fork a process</p></li>
<li><p>worker lookup mappers and reducers</p></li>
<li><p>worker send each keyword to each mapper</p></li>
<li><p>each mapper get a set of document &ndash; occurrence pairs by the keyword</p></li>
<li><p>mapper send result set to reducer</p></li>
<li><p>reducer gather all sets from mappers and calculate the total occurrence</p></li>
<li><p>reducer sort the document by total occurrence and send back to client</p></li>
</ul>
</li>
</ul>


<h2>Client</h2>

<p>It is a program on local machine. It can be runned by user on command line along with parameters. client will first lookup the naming server to find the address of mini-google, then request for a socket connection and then send index/query request to it with connection and then waiting for response.</p>

<h3>Mini-google</h3>

<p>First it will create a socket and binding with the address and port number, then listen() in a infinite loop. When receiving a request from client, it create a new process regarding to request type (index/query) to handle the request. After that, server will keeping listening for other requests.</p>

<h3>Worker</h3>

<p>Worker is the critical part of the whole work. It holds the connection with client and send result back to client if all mappers and reducers have done their work. It will split the file by the number of available mapper it got from name server. After file splitted, it will send each split to each mapper by a set of parameters</p>

<ul>
<li><p>split file name</p></li>
<li><p>document name</p></li>
<li><p>number of mappers // to let reducer know when to start reducing</p></li>
<li><p>address and ports of all reducers</p></li>
</ul>


<p>and then waiting for their response by holding connection on multi-threads. If all mappers response work done, it will send message to client and close the connection.</p>

<h3>Mapper helper</h3>

<p>Before working, it will register on name server when start running, with it address, port and type, which is &ldquo;mapper&rdquo;.</p>

<p>Mapper first do the word counting and combining on it splits by shell script using tr, sed, awk, uniq, sort. and then do partition on the map result, by the number of reducers. It do partition not by lines, but by alphabetic. Meaning if number of reducers is 2, result will be partition to two files, one with terms from [a-m], one with terms from [n-z], which refers to the step of shuffle. Then sent each partition to each reducer and waiting for their response by holding connection on multi-threads. If all reducers response work done, it will send message to worker and close the connection.</p>

<h3>Reducer helper</h3>

<p>Before working, it will register on name server when start running, with it address, port and type, which is &ldquo;reducer&rdquo;.</p>

<p>Reducer first get the number of mappers. By this number, it will know how many mapper it have to wait. After it received all data from mapper, it will start to aggregate the mapper by shell script with awk. Then it will start 5 thread to merge result to master index. When all thread done their job. Reducer will send message back to mapper that its work done.</p>

<h3>Name Server</h3>

<p>Naming server establish sockets and keep waiting for connection. It support two type of request,register and request. Register will store address, port, server type. Lookup will will send back a set of address, port and server type by server type and number. For example, get 5 mappers, or get 3 reducers.</p>

<h3>Master index</h3>

<p>In this project, name index is separated alphabetically in 26 files for each letter. The advantage is that they could be better paralleled in indexing and querying with less concern on blocking issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A User Level Light-weight Thread Scheduling Implementation ]]></title>
    <link href="http://GingerBear.github.io/blog/2013/11/01/a-light-weight-thread-scheduling-implementation/"/>
    <updated>2013-11-01T14:55:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2013/11/01/a-light-weight-thread-scheduling-implementation</id>
    <content type="html"><![CDATA[<p>In last three days, I was trying to the operating system course project. It is a user level light-weight thread scheduler, with semaphores dealing with concurrency problem. Frankly I never did and multi-thread programming before, not to mention a write a multi-thread scheduler in C. And of course, I didn&rsquo;t do well with the operating system course. I will talk about the course at the end of this post. I almost forgot this homework until I found it just left three for the due. So what I do is not from nothing, but from my <a href="https://github.com/cadmuxe">cadmuxe</a>&rsquo;s code. Here I am gonna explain how it works.</p>

<h2>Description and Requirement</h2>

<p>The whole requirement is <a href="https://drive.google.com/file/d/1oWoWm2MAQf7uEw0U8gwXLUK0ufQHAlexupOlO0o6QZTG3Z67kM7GrRFsV0a7LK1mHObatCizd_Y4_8RD/edit?usp=sharing">here</a>. In short, the scheduler have</p>

<pre><code>lwt_init(int quantum)
</code></pre>

<p>to set up the main thread, the global thread, the signal hander and thread running intervel with the a period of time as parameter (quantum).</p>

<pre><code>lwt_create(char *name, void *argv, fun_type fn)
</code></pre>

<p>to create a thread with name, argument pointer and function pointer. and run it immediatly. return thread indentifier.</p>

<pre><code>lwt_sleep(int seconds)
</code></pre>

<p>to put current thread into sleep for seconds.</p>

<pre><code>thrd_wait(lwt *t)
</code></pre>

<p>to put current thread into wait until the input thread (child thread) exit.</p>

<pre><code>smphr_create(int size)
</code></pre>

<p>to create a semaphore with a input size, and init a thread queue for waiting list.</p>

<pre><code>P(smphr *s)
</code></pre>

<p>to acquire semaphore if avaible, if not, put current thread into queue</p>

<pre><code>V(smphr *s)
</code></pre>

<p>to release semaphore, and dequeue the front thread in queue</p>

<h2>How to achieve multi-thread</h2>

<p>The idea is pretty similar with multi-processes running on a single processor. Threads are switched in a fast speed with a process, making it like they are served simultaneously. But how to make the switch? Use <em>alarm signal</em> to interrupt running thread, <em>setjmp</em> to save its running environment and <em>longjmp</em> to restore to its that environment. Here is the code :</p>

<pre><code>lwt_init() 
{
    /* ... */

    signal(SIGALRM, alarm_handler);
    ualarm(lwt_quantum, 0);

    /* ... */
}

void alarm_handler () 
{
    /* ... */

    if (setjmp(sys_t.curr-&gt;env) == 0) { // interrupted, save current thread's runing environment. if get here from longjmp(), setjmp will return no-zero
        do {
            sys_t.curr = sys_t.curr-&gt;next; // set next thread as current thread

            /* ... check state of current thread here */

        } while (sys_t.curr-&gt;state != lwt_READY);

        ualarm(sys_t.interval + sys_t.curr-&gt;prior, 0);
        longjmp(sys_t.curr-&gt;env, 1);    // after switch, continue running environment where it was saved
    }

    /* ... */
}
</code></pre>

<p>There is a serious problem here. Thread are created on main thread (actually process), so when they run, a stack will be allocated on the top of main stack. The stack will be remove if the thread run is over (returned). There is no problem if thread run one by one. But in this case, they are running simultaneously (not precisely simultaneous, but running without end of others). The result is that all these threads are using a same stack. We know that when we perform of a setjmp, env save the stack pointer of the thread. So it comes to the situation that switching will make thread go back to its stack pointer, but the content of that stack will not its content. Stack is all messed.</p>

<p>A way to solve this is to give each thread its own stack when they created. This is achieve by a statement of assembly language. Code is there:</p>

<pre><code>#ifdef _X86
__asm__("mov %0, %%esp;": :"r"(sys_t.curr-&gt;stack + lwt_STACK_SIZE) );
#else
__asm__("mov %0, %%rsp;": :"r"(sys_t.curr-&gt;stack + lwt_STACK_SIZE) );
#endif
</code></pre>

<p>I don&rsquo;t know jack about assembly language. But I was told that it move the stack pointer to a new stack.</p>

<h2>How to implement Semaphore</h2>

<p>Semaphore actually is quite sample (the reason I say this, because I thought it was hard). It is like a gate keeper having a list of available rooms. It will tell the visitor if any room available. If yes, gate keeper will allow the visitor to use the room and reduce the number of available rooms. If no, put the visiter on the waiting list.</p>

<p>If the visitor has done with the room, gate keeper will make that room available again, and give it to the first visitor on the waiting list, and sure remove him from waiting list.</p>

<p>P() is for thread to achieve the first part (check and gain semaphore), V() is for the second part (release semaphore and give to to front waiting list). Here is the code:</p>

<pre><code>typedef struct smphr_t {
    int     smphr_size;
    Queue   queue;              // queue store thread waiting for semophore
} smphr;

smphr * smphr_create(int smphr_size){
    smphr *s;
    s = malloc(sizeof(smphr));
    s-&gt;smphr_size = smphr_size;
    s-&gt;queue = CreateQueue();                   // use a queue to store waiting list
    return s;
}

void P(smphr *s){
    int left = ualarm(0, 0);                    // disable the context switch, by clear the alarm
    if(s-&gt;smphr_size &gt; 0){                      
        s-&gt;smphr_size -= 1;                     // semaphore offered
        ualarm(left, 0);                        // restore context switch
    } else {                                    // no more semaphore, blocked
        s-&gt;smphr_size -= 1;                     // TRICK! semaphore still need to be reduced one, in order to avoid fullCount getting too large. 
        sys_t.curr-&gt;state = sem_WAIT;
        Enqueue(sys_t.curr, s-&gt;queue);          // put into queue
        raise(SIGALRM);
    }
}

void V(smphr *s){
    int left = ualarm(0, 0);
    s-&gt;smphr_size += 1;                         // release semaphore
    if (!IsEmpty(s-&gt;queue)) {                   
        Front(s-&gt;queue)-&gt;state = lwt_READY;     // dequeue front and set to READY, if not empty
        Dequeue(s-&gt;queue);
    }
    ualarm(left, 0);
}
</code></pre>

<h2>Test with Producer-Consumer Problem</h2>

<p>The LWT can be tested by a classical Producer-Consumer problem. Producer produce item, Consumer consume item produced. If item buffer is full, producer should wait (producer trying to produce should be put on the waiting list) until item is consumed and buffer is not full. Consumer, similarly, should wait if item buffer is empty (put on waiting list), until item is produced and buffer is not empty.</p>

<p>So we need a fullCount Semaphore (max size of buffer) to decide if full, a emptyCount Semaphore (max size of buffer) to decide if empty and a useLock to only let one producer/consumer access to buffer at one time. Here is the code:</p>

<pre><code>void producer(){
    srand(time(NULL));  // Initializes random number generator
    int item = 0;
    while(1){        
        item = rand();
        P(emptyCount);
        P(useQueue);
        if (current &lt; N) {
            buffer[current++] = item;
        }
        V(useQueue);
        V(fullCount);
        printf("Producer: %s\tproduce: %d\te: %d\tf: %d\tSize:%d\n"
            , get_curr_name()
            , item
            , smphr_get_size(emptyCount)
            , smphr_get_size(fullCount)
            , current);
    }
}

void consumer(){
    int item = 0;
    int i = 0;
    while(i &lt; 30){ 
        P(fullCount);
        P(useQueue);
        if (current &gt; 0) {
            item = buffer[--current];
        }
        V(useQueue);
        V(emptyCount);
        printf("Consumer: %s\tconsume: %d\te: %d\tf: %d\tSize:%d\n"
            , get_curr_name()
            , item
            , smphr_get_size(emptyCount)
            , smphr_get_size(fullCount)
            , current);
        i++;
    }
}

int main(int argc, char *argv[]){
    int i,j;
    lwt *t;
    emptyCount  = smphr_create(N);
    fullCount   = smphr_create(0);
    useQueue    = smphr_create(1);

    lwt_init(QUANTUM);

    lwt_create("p1", 0, NULL, producer);  
    lwt_create("p2", 0, NULL, producer);  
    lwt_create("p3", 0, NULL, producer);  
    lwt_create("p4", 0, NULL, producer);  
    lwt_create("c1", 0, NULL, consumer);     
    t = lwt_create("c2", 0, NULL, consumer);     

    thrd_wait(t);
    printf("Two Consumers consume 30 items!\n");
    printf("Done!\n");
}
</code></pre>

<p>The full code is on <a href="https://github.com/GingerBear/LWT">github</a>. Thanks to <a href="https://github.com/cadmuxe">cadmuxe</a> and <a href="https://github.com/liyangbin">liyangbin</a> for the help.</p>
]]></content>
  </entry>
  
</feed>
