<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learn | Neil Ding]]></title>
  <link href="http://GingerBear.github.io/blog/categories/learn/atom.xml" rel="self"/>
  <link href="http://GingerBear.github.io/"/>
  <updated>2014-02-10T17:56:58-05:00</updated>
  <id>http://GingerBear.github.io/</id>
  <author>
    <name><![CDATA[Neil Ding]]></name>
    <email><![CDATA[bbbear444@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A phone number matching regular expression]]></title>
    <link href="http://GingerBear.github.io/blog/2014/01/10/a-phone-number-matching-regular-expression/"/>
    <updated>2014-01-10T16:11:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2014/01/10/a-phone-number-matching-regular-expression</id>
    <content type="html"><![CDATA[<p>I used to void learning regular expression, because they looks too dry to digest. And in most case when I wanna use them, I can find existing ones on the web. But there are always a shadow in my mind that it is important. The shadow forms from when I found a lot of JavaScript books spending a whole chapter introducing Regular Expression. Weeks ago when I was reading Jeff Atwood&rsquo;s <em>Effective Programming: More Than Writing Code</em>, I read a chapter talking about phone screen. It point out five main part in phone screen.</p>

<ul>
<li>Coding</li>
<li>OO Programming</li>
<li>Scripting and Regular Expression</li>
<li>Data Structure</li>
<li>Bits and Bytes</li>
</ul>


<p>The <strong>Regular Expression</strong> hits me, and make me starting learn it. After reading the recommanded <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions?redirectlocale=en-US&amp;redirectslug=JavaScript%2FGuide%2FRegular_Expressions">MDN Article</a> and a <a href="https://www.youtube.com/watch?v=EkluES9Rvak">video</a> presented by Lea Verou, I start to do the sample task on Jeff&rsquo;s book about Regular Expression.</p>

<h3>A phone number match</h3>

<p>Two kinds of phone should be matched: (123)-321-4321 and 123-321-4321.</p>

<p>First, the method I use is</p>

<pre><code>Regex.test(String)
</code></pre>

<p>it will return ture if match, false if not.</p>

<p>Let&rsquo;s do the first case. a &ldquo;(&rdquo; at the begining, so /(/. Then three number and a &ldquo;}&rdquo;, so /(\d{3})/. Then just &ldquo;&ndash;&rdquo; and three and four numbers, so</p>

<pre><code>/\(\d{3}\)-\d{3}-\d{4}/.
</code></pre>

<p>In the second case, there is not &ldquo;(&rdquo;. So &ldquo;(&rdquo; should occure once or not, so add a &ldquo;?&rdquo;.</p>

<pre><code>/\(?\d{3}\)?-\d{3}-\d{4}/.
</code></pre>

<p>However there is a false positive for something like 123)-321-4321. The solution is make it occur for both &ldquo;(&rdquo; and &ldquo;)&rdquo;, OR neither of them. so</p>

<pre><code>/((\d{3})|(\(\d{3}\)))-\d{3}-\d{4}/
</code></pre>

<p>Everyone told me how powerful Regular Expressiuon is, so I guess there are much more for me to discover.</p>
]]></content>
  </entry>
  
</feed>
