<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Neil Ding's Blog]]></title>
  <link href="http://GingerBear.github.io/atom.xml" rel="self"/>
  <link href="http://GingerBear.github.io/"/>
  <updated>2014-01-14T18:55:03-05:00</updated>
  <id>http://GingerBear.github.io/</id>
  <author>
    <name><![CDATA[Neil Ding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A plan to Hunting Job AS A TEAM (deprecated)]]></title>
    <link href="http://GingerBear.github.io/blog/2014/01/14/a-plan-to-hunting-job-as-a-team/"/>
    <updated>2014-01-14T18:13:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2014/01/14/a-plan-to-hunting-job-as-a-team</id>
    <content type="html"><![CDATA[<p>Since many friends and me are trying to hunting job in the US. I realize there should be a place for us to discuss and share. I am think if I could build some thing that may be used for that. We will benefit from that tool and I will benefit from building that tool. Even some friends may join us building this tool and make it open-source.</p>

<p>Generally, this tool should have serveral parts:</p>

<ul>
<li>Coding Board</li>
<li>Discuess Board</li>
<li>Shared To-Do-List</li>
</ul>


<h2>Coding Board</h2>

<p>Most importantly, users are willing to have a place to post their coding puzzles, for asking help or for sharing good questions. The main page of coding board is a list of post, along with title, poster, participants, tags(help, good stuff), and time.</p>

<p>Clicking into a item in the list, it will go to the this puzzle page. It will show detail info of this puzzle. Next to the page, it will appended by a set of comment or answer to that puzzle. Also they could use @ sign to mention someone. (So far it is just like the github issue).</p>

<p>The editor for create new post should markdown and syntax highlights.</p>

<p>More features like assign helper to solve question and email notification.</p>

<h2>Discuess Board</h2>

<p>Users shared job info on this board. Like a good position opening. Or some interview experience sharing. Basicly, I this lit version of Coding Board. (Why not github)</p>

<h2>Shared To-Do-List</h2>

<p>I found myself can not live without a todo list. And I think it will be more powerful in incenting people to get shit done. Combining the coding board with the todo list, I kinda feel that will promote people to code more. Well, in a second thought, people may not that will to share their todo list. They are just not that enjoy making personal thing pulic to others. And they may feel guilty when they feel not finished the todo list, and don&rsquo;t want others know. So quite a few people may not share their todo list.</p>

<h2>In the End: Just use Github</h2>

<p>In the end of writing this post, I convinced myself not to build a customed tool specifically for this thing. It cost me too much, and just not gain too much, and people won&rsquo;t get too much better from this tool. Github is pretty well builted to fit most of the requirement. So why just make a repo, set a set of rules, and let them to join.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A phone number matching regular expression]]></title>
    <link href="http://GingerBear.github.io/blog/2014/01/10/a-phone-number-matching-regular-expression/"/>
    <updated>2014-01-10T16:11:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2014/01/10/a-phone-number-matching-regular-expression</id>
    <content type="html"><![CDATA[<p>I used to void learning regular expression, because they looks too dry to digest. And in most case when I wanna use them, I can find existing ones on the web. But there are always a shadow in my mind that it is important. The shadow forms from when I found a lot of JavaScript books spending a whole chapter introducing Regular Expression. Weeks ago when I was reading Jeff Atwood&rsquo;s <em>Effective Programming: More Than Writing Code</em>, I read a chapter talking about phone screen. It point out five main part in phone screen.</p>

<ul>
<li>Coding</li>
<li>OO Programming</li>
<li>Scripting and Regular Expression</li>
<li>Data Structure</li>
<li>Bits and Bytes</li>
</ul>


<p>The <strong>Regular Expression</strong> hits me, and make me starting learn it. After reading the recommanded <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions?redirectlocale=en-US&amp;redirectslug=JavaScript%2FGuide%2FRegular_Expressions">MDN Article</a> and a <a href="https://www.youtube.com/watch?v=EkluES9Rvak">video</a> presented by Lea Verou, I start to do the sample task on Jeff&rsquo;s book about Regular Expression.</p>

<h3>A phone number match</h3>

<p>Two kinds of phone should be matched: (123)-321-4321 and 123-321-4321.</p>

<p>First, the method I use is</p>

<pre><code>Regex.test(String)
</code></pre>

<p>it will return ture if match, false if not.</p>

<p>Let&rsquo;s do the first case. a &ldquo;(&rdquo; at the begining, so /(/. Then three number and a &ldquo;}&rdquo;, so /(\d{3})/. Then just &ldquo;&ndash;&rdquo; and three and four numbers, so</p>

<pre><code>/\(\d{3}\)-\d{3}-\d{4}/.
</code></pre>

<p>In the second case, there is not &ldquo;(&rdquo;. So &ldquo;(&rdquo; should occure once or not, so add a &ldquo;?&rdquo;.</p>

<pre><code>/\(?\d{3}\)?-\d{3}-\d{4}/.
</code></pre>

<p>However there is a false positive for something like 123)-321-4321. The solution is make it occur for both &ldquo;(&rdquo; and &ldquo;)&rdquo;, OR neither of them. so</p>

<pre><code>/((\d{3})|(\(\d{3}\)))-\d{3}-\d{4}/
</code></pre>

<p>Everyone told me how powerful Regular Expressiuon is, so I guess there are much more for me to discover.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS2510: Project 2 - MiniGoogle Final Report]]></title>
    <link href="http://GingerBear.github.io/blog/2013/12/17/cs2510-project-2-minigoogle-final-report/"/>
    <updated>2013-12-17T16:42:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2013/12/17/cs2510-project-2-minigoogle-final-report</id>
    <content type="html"><![CDATA[<p>CS2510: Project 2 &ndash; MiniGoogle Final Report</p>

<h5>Guanxiong Ding (gud7)</h5>

<p>12/17/2013</p>

<h2>General Workflow</h2>

<h4>Indexing workflow</h4>

<ul>
<li>client send the documents to minigoogle server</li>
<li>mingoogle server dispatch socket connections to worker by fork a process</li>
<li>worker lookup mappers and reducers</li>
<li>worker split the file and send to ma ppers</li>
<li>each mapper count word for its split</li>
<li>mapper partition the word count result and send to reducer</li>
<li>reducer aggregate the result and append to master index files</li>
</ul>


<h4>Querying workflow</h4>

<ul>
<li>client send keywords to minigoogle server</li>
<li>mingoogle server dispatch socket connections to worker by fork a process</li>
<li>worker lookup mappers and reducers</li>
<li>worker send each keyword to each mapper</li>
<li>each mapper get a set of document &ndash; occurrence pairs by the keyword</li>
<li>mapper send result set to reducer</li>
<li>reducer gather all sets from mappers and calculate the total occurrence</li>
<li>reducer sort the document by total occurrence and send back to client</li>
</ul>


<h2>Client</h2>

<p>It is a program on local machine. It can be runned by user on command line along with parameters. client will first lookup the naming server to find the address of mini-google, then request for a socket connection and then send index/query request to it with connection and then waiting for response.</p>

<h3>Mini-google</h3>

<p>First it will create a socket and binding with the address and port number, then listen() in a infinite loop. When receiving a request from client, it create a new process regarding to request type (index/query) to handle the request. After that, server will keeping listening for other requests.</p>

<h3>Worker</h3>

<p>Worker is the critical part of the whole work. It holds the connection with client and send result back to client if all mappers and reducers have done their work. It will split the file by the number of available mapper it got from name server. After file splitted, it will send each split to each mapper by a set of parameters</p>

<ul>
<li>split file name</li>
<li>document name</li>
<li>number of mappers // to let reducer know when to start reducing</li>
<li>address and ports of all reducers</li>
</ul>


<p>and then waiting for their response by holding connection on multi-threads. If all mappers response work done, it will send message to client and close the connection.</p>

<h3>Mapper helper</h3>

<p>Before working, it will register on name server when start running, with it address, port and type, which is &ldquo;mapper&rdquo;.</p>

<p>Mapper first do the word counting and combining on it splits by shell script using tr, sed, awk, uniq, sort. and then do partition on the map result, by the number of reducers. It do partition not by lines, but by alphabetic. Meaning if number of reducers is 2, result will be partition to two files, one with terms from [a-m], one with terms from [n-z], which refers to the step of shuffle. Then sent each partition to each reducer and waiting for their response by holding connection on multi-threads. If all reducers response work done, it will send message to worker and close the connection.</p>

<h3>Reducer helper</h3>

<p>Before working, it will register on name server when start running, with it address, port and type, which is &ldquo;reducer&rdquo;.</p>

<p>Reducer first get the number of mappers. By this number, it will know how many mapper it have to wait. After it received all data from mapper, it will start to aggregate the mapper by shell script with awk. Then it will start 5 thread to merge result to master index. When all thread done their job. Reducer will send message back to mapper that its work done.</p>

<h3>Name Server</h3>

<p>Naming server establish sockets and keep waiting for connection. It support two type of request,register and request. Register will store address, port, server type. Lookup will will send back a set of address, port and server type by server type and number. For example, get 5 mappers, or get 3 reducers.</p>

<h3>Master index</h3>

<p>In this project, name index is separated alphabetically in 26 files for each letter. The advantage is that they could be better paralleled in indexing and querying with less concern on blocking issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some thoughts one day after graduate]]></title>
    <link href="http://GingerBear.github.io/blog/2013/12/14/some-thoughts-one-day-after-graduate/"/>
    <updated>2013-12-14T23:47:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2013/12/14/some-thoughts-one-day-after-graduate</id>
    <content type="html"><![CDATA[<p>Now is day one after graduate. In fact I have to do my operating system project now, I too much thought are stoping me. So I decide to do project tommorrow and write all these thoughts down. Ok, use Chinese.</p>

<h2>莫扎特的Clarinet Concerto In A, K.622: 2. Adagio</h2>

<p>我正在反复听莫扎特的(Clarinet Concerto In A, K.622: 2. Adagio)[<a href="http://www.xiami.com/song/1770385763?spm=a1z1s.6659513.0.0.0555RH">http://www.xiami.com/song/1770385763?spm=a1z1s.6659513.0.0.0555RH</a>]，这首曲子能让人沉静下来能想想自己的事情。第一次听是在一个莫扎特的纪录片的片头曲听到，当时一听到那个单簧管吹出的旋律就很感动。</p>

<h2>毕业中</h2>

<h3>甘同学的包</h3>

<p>说说昨晚的一个事儿。昨天晚上与甘同学小聚，因为他要就要去加州了，月黑风高的去了匹兹堡市中心逛了逛聊了聊，回来的时候已经很晚了（或者说很早了，因为是早上六点），迷迷糊糊到了家马上就睡了，刚睡一会收到个电话说他包找不到了，里面有个两千多刀的单反，问我看看记不记得放哪儿了，我起来看了看包，发现是我自己包（恰好跟他的包除了颜色都是一样的），然后去门外看了看下车的地方也没有。我告诉他可能是放到原来的车里地上了，但他手机又没电了，钥匙在那包里也回不去。那个焦急的情景，我很能体会。中间他没有办法去买了个充电器去咖啡店充了电，又租了车去了躺路过的地方找，找不到，又打了911，甚至直接下单买了一台新的单反。到了早上我又收到了电话问我再确定一下路上有没有，尽管我很确定但还是去看了看，依旧什么都没有。我回到了房间坐再床上睡了，突然看到了我椅子下还有个包，就是他的包…… 看来是我昨晚下车的时候顺手把他的包当成我的包就直接拿走了，但是我完全不记得了。这事儿我感到十分抱歉，自己的一个犯傻导致他人身心具疲。</p>

<h3>学院三楼</h3>

<p>学院三楼一直是个热闹的地方，长期有邦邦同学把守，每次去那儿都挺欢乐。我平时不怎么去，直到这个学期的后半段去的比较多，一是由于图书馆人太多，位子不好找，二是跟认识的同学还能聊聊天，又是还能讨论讨论项目，运气好甚至还有免费的食物。在这段时间里也熟悉了不少新朋友，每次学习到后面就成了茶话会，大家还都听能聊的，还挺开心的。学院三楼的那个桌儿仿佛成了一个我们专业小伙伴们的据点，每天都会有小伙伴来首先将其霸占。</p>

<h3>Trees Hall</h3>

<p>打篮球的地儿，虽然比起国内的强多了，但地板还是不可避免的滑，我也不可避免的打得没有外场好。每周我都会来这里打两次球，认识了一堆小伙伴，真的有些不舍得离开。如果能找到匹兹堡大学的工作，最大的好处就是能继续在这儿打篮球。刚来的那会儿真是谁都不认识，很傻很天真的跟跟几个老黑打起半场来。后来打起全场第一次就更清华哥吵起来了（后来还是关系不错），狗腿后来把我拉近了他们的篮球队，每周二周五晚上都非常认真的在这里练联防和战术，当时的那几个在一队真的挺厉害的，甚至在trees都很难找到能打赢我们的队。首先我们的防守特别好，我们守的是联防，外线的补位非常及时，内线有狗腿的强硬防守。对手在进攻的时候除了投三分，几乎很难突破进来。在进攻端，大神的组织非常合理，他知道该怎么打，并且总能打出一些战术。我们还有生哥的三分球，以及非常好的快攻意识，我更像是个小前锋，进攻方式多是中投和三分，偶尔有一些挡拆的配合。后来对篮球最执着的狗腿回国了，大家似乎就没有当时的那种练球的劲头了，大家都有各自忙的事情，晚上来打球更多是为了消遣。我之前一直是做他们车过来，后面也逐渐的自己走过来了，渐渐跟他们也走得不是那么近了，更多的是想自己多发挥一些个人能力，因为说实话在之前强大打团队里，打球的方式非常单一，个人能力都退化了。总之这是一个值得回忆的地方，如果我留下，我想我需要去练练身体，把个人能力提上去。</p>

<h4>(待续)</h4>

<h3>加州</h3>

<h3>回国</h3>

<h3>分手</h3>

<h2>毕业后</h2>

<h3>学校工作</h3>

<h3>空闲的日子</h3>

<h3>朋友</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Two Weeks using MacBook Pro 13 inch with Retina display 2013 late version]]></title>
    <link href="http://GingerBear.github.io/blog/2013/11/08/first-two-weeks-using-macbook-pro-13-inch-with-retina-display-2013-late-version/"/>
    <updated>2013-11-08T02:03:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2013/11/08/first-two-weeks-using-macbook-pro-13-inch-with-retina-display-2013-late-version</id>
    <content type="html"><![CDATA[<p>I bought the new macbook pro right after the latest release of MBP on Apple&rsquo;s event. I was so existed about the new macbook pro, and I becoming more and more display my PC. There are a lot to talk about my loving on the new macbook pro, and lot of dis-lovness of my samsung PC. It&rsquo;s too late and I want to post this blog before sleep. So let me be short for the most important benefit.</p>

<p>Oh, by the way, Apple just release the Bug fix for this macbook I using, which happens to be freeze on daily usage on a large set of new users. It is quite annoying for my mac freezing in the way I am using. What&rsquo;s worse is that I make me feel unsafe to use this machine, and always feeling it&rsquo;s gonna stuck. But finally, it is fixed. No freezing after tonight&rsquo;s update.</p>

<h2>No.1 Shortcuts</h2>

<p>What really make my working with mac effective is its massive and make-sense shortcuts. With command key combined with another key, I can operate faster than using mouse and trackpad. The most I use is</p>

<ul>
<li>cmd + q for close window or tab</li>
<li>cmd + q for quick application</li>
<li>cmd + l to select the address bar in browser</li>
<li>cmd + t to open a new tab</li>
<li>cmd + left/right arrow to the begin/end of line</li>
<li>option + left/right move cursor word by word</li>
<li>cmd + shift + 4 to screenshot</li>
</ul>


<p>I believe there are even more shortcuts to boost my usage.</p>

<p>In addition, Alfred, of course, let me open application, file and directory without open folder and folder in finder. Which speed up my productivity a lot.</p>

<h2>No.2 Trackpad</h2>

<p>I have not using mouse for two weeks. The trackpad is super responsive and really magic with those gestures. The most useful one is multi-screen by four finger swipe left/right. It make good to organizing my applications when I open a lot. And four finger swipe up, to organize my my application automatically. I feel very comfortable and easier with different functional separated screens.</p>

<h2>No.3 Screen</h2>

<p>When I see an non-retina screen now, I will feel a lot blur. This screen is very precise and with great color. The display resolution is actually 1280x800, making 4 pixels to render 1 pixel. I cannot see the pixel in the screen, or I can see pixel clearly those application without retina-display optimization. I feel very comfortable coding with this screen.</p>

<h2>No.4 keyboard</h2>

<p>A lot of laptops try to make their keyboard looks like macbook&rsquo;s. But they failed to make their keyboards type like macbook&rsquo;s. This keyboard&rsquo;s type feel is neat. Each key is well separate and with a little curve in from the middle of key, which make you feel explicitly typing right on the key. And the keys&#8217; positions are well set. Make my muscle feel nature and comfortable when I am typing. My last PC&rsquo;s keys are really bad-positioned.</p>

<h2>No.5 Light</h2>

<p>I don&rsquo;t have to carry a so-heavy PC and charger to library everyday.</p>

<h2>No.6 Misc</h2>

<p>I call them miscellaneous not because they are not important, but they are not the greatest impact for me now. First is the batter life. I can working on it for a whole after without a charge. Second, good looking, yes, it looks beautiful like a art work. Then the charger, very well design. Cable can be well rolled on the charger. The port is magnetic and works for both direction.</p>

<h2>Summary</h2>

<p>The main things in mac is fast, clean and beautiful. I believe I won&rsquo;t change it in the following three years. Like the Julio, PhD Student of Peter, said, when I get the macbook (a old white plastic one), my life changed. I can feel that it is already change my life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A User Level Light-weight Thread Scheduling Implementation ]]></title>
    <link href="http://GingerBear.github.io/blog/2013/11/01/a-light-weight-thread-scheduling-implementation/"/>
    <updated>2013-11-01T14:55:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2013/11/01/a-light-weight-thread-scheduling-implementation</id>
    <content type="html"><![CDATA[<p>In last three days, I was trying to the operating system course project. It is a user level light-weight thread scheduler, with semaphores dealing with concurrency problem. Frankly I never did and multi-thread programming before, not to mention a write a multi-thread scheduler in C. And of course, I didn&rsquo;t do well with the operating system course. I will talk about the course at the end of this post. I almost forgot this homework until I found it just left three for the due. So what I do is not from nothing, but from my <a href="https://github.com/cadmuxe">cadmuxe</a>&rsquo;s code. Here I am gonna explain how it works.</p>

<h2>Description and Requirement</h2>

<p>The whole requirement is <a href="https://drive.google.com/file/d/1oWoWm2MAQf7uEw0U8gwXLUK0ufQHAlexupOlO0o6QZTG3Z67kM7GrRFsV0a7LK1mHObatCizd_Y4_8RD/edit?usp=sharing">here</a>. In short, the scheduler have</p>

<pre><code>lwt_init(int quantum)
</code></pre>

<p>to set up the main thread, the global thread, the signal hander and thread running intervel with the a period of time as parameter (quantum).</p>

<pre><code>lwt_create(char *name, void *argv, fun_type fn)
</code></pre>

<p>to create a thread with name, argument pointer and function pointer. and run it immediatly. return thread indentifier.</p>

<pre><code>lwt_sleep(int seconds)
</code></pre>

<p>to put current thread into sleep for seconds.</p>

<pre><code>thrd_wait(lwt *t)
</code></pre>

<p>to put current thread into wait until the input thread (child thread) exit.</p>

<pre><code>smphr_create(int size)
</code></pre>

<p>to create a semaphore with a input size, and init a thread queue for waiting list.</p>

<pre><code>P(smphr *s)
</code></pre>

<p>to acquire semaphore if avaible, if not, put current thread into queue</p>

<pre><code>V(smphr *s)
</code></pre>

<p>to release semaphore, and dequeue the front thread in queue</p>

<h2>How to achieve multi-thread</h2>

<p>The idea is pretty similar with multi-processes running on a single processor. Threads are switched in a fast speed with a process, making it like they are served simultaneously. But how to make the switch? Use <em>alarm signal</em> to interrupt running thread, <em>setjmp</em> to save its running environment and <em>longjmp</em> to restore to its that environment. Here is the code :</p>

<pre><code>lwt_init() 
{
    /* ... */

    signal(SIGALRM, alarm_handler);
    ualarm(lwt_quantum, 0);

    /* ... */
}

void alarm_handler () 
{
    /* ... */

    if (setjmp(sys_t.curr-&gt;env) == 0) { // interrupted, save current thread's runing environment. if get here from longjmp(), setjmp will return no-zero
        do {
            sys_t.curr = sys_t.curr-&gt;next; // set next thread as current thread

            /* ... check state of current thread here */

        } while (sys_t.curr-&gt;state != lwt_READY);

        ualarm(sys_t.interval + sys_t.curr-&gt;prior, 0);
        longjmp(sys_t.curr-&gt;env, 1);    // after switch, continue running environment where it was saved
    }

    /* ... */
}
</code></pre>

<p>There is a serious problem here. Thread are created on main thread (actually process), so when they run, a stack will be allocated on the top of main stack. The stack will be remove if the thread run is over (returned). There is no problem if thread run one by one. But in this case, they are running simultaneously (not precisely simultaneous, but running without end of others). The result is that all these threads are using a same stack. We know that when we perform of a setjmp, env save the stack pointer of the thread. So it comes to the situation that switching will make thread go back to its stack pointer, but the content of that stack will not its content. Stack is all messed.</p>

<p>A way to solve this is to give each thread its own stack when they created. This is achieve by a statement of assembly language. Code is there:</p>

<pre><code>#ifdef _X86
__asm__("mov %0, %%esp;": :"r"(sys_t.curr-&gt;stack + lwt_STACK_SIZE) );
#else
__asm__("mov %0, %%rsp;": :"r"(sys_t.curr-&gt;stack + lwt_STACK_SIZE) );
#endif
</code></pre>

<p>I don&rsquo;t know jack about assembly language. But I was told that it move the stack pointer to a new stack.</p>

<h2>How to implement Semaphore</h2>

<p>Semaphore actually is quite sample (the reason I say this, because I thought it was hard). It is like a gate keeper having a list of available rooms. It will tell the visitor if any room available. If yes, gate keeper will allow the visitor to use the room and reduce the number of available rooms. If no, put the visiter on the waiting list.</p>

<p>If the visitor has done with the room, gate keeper will make that room available again, and give it to the first visitor on the waiting list, and sure remove him from waiting list.</p>

<p>P() is for thread to achieve the first part (check and gain semaphore), V() is for the second part (release semaphore and give to to front waiting list). Here is the code:</p>

<pre><code>typedef struct smphr_t {
    int     smphr_size;
    Queue   queue;              // queue store thread waiting for semophore
} smphr;

smphr * smphr_create(int smphr_size){
    smphr *s;
    s = malloc(sizeof(smphr));
    s-&gt;smphr_size = smphr_size;
    s-&gt;queue = CreateQueue();                   // use a queue to store waiting list
    return s;
}

void P(smphr *s){
    int left = ualarm(0, 0);                    // disable the context switch, by clear the alarm
    if(s-&gt;smphr_size &gt; 0){                      
        s-&gt;smphr_size -= 1;                     // semaphore offered
        ualarm(left, 0);                        // restore context switch
    } else {                                    // no more semaphore, blocked
        s-&gt;smphr_size -= 1;                     // TRICK! semaphore still need to be reduced one, in order to avoid fullCount getting too large. 
        sys_t.curr-&gt;state = sem_WAIT;
        Enqueue(sys_t.curr, s-&gt;queue);          // put into queue
        raise(SIGALRM);
    }
}

void V(smphr *s){
    int left = ualarm(0, 0);
    s-&gt;smphr_size += 1;                         // release semaphore
    if (!IsEmpty(s-&gt;queue)) {                   
        Front(s-&gt;queue)-&gt;state = lwt_READY;     // dequeue front and set to READY, if not empty
        Dequeue(s-&gt;queue);
    }
    ualarm(left, 0);
}
</code></pre>

<h2>Test with Producer-Consumer Problem</h2>

<p>The LWT can be tested by a classical Producer-Consumer problem. Producer produce item, Consumer consume item produced. If item buffer is full, producer should wait (producer trying to produce should be put on the waiting list) until item is consumed and buffer is not full. Consumer, similarly, should wait if item buffer is empty (put on waiting list), until item is produced and buffer is not empty.</p>

<p>So we need a fullCount Semaphore (max size of buffer) to decide if full, a emptyCount Semaphore (max size of buffer) to decide if empty and a useLock to only let one producer/consumer access to buffer at one time. Here is the code:</p>

<pre><code>void producer(){
    srand(time(NULL));  // Initializes random number generator
    int item = 0;
    while(1){        
        item = rand();
        P(emptyCount);
        P(useQueue);
        if (current &lt; N) {
            buffer[current++] = item;
        }
        V(useQueue);
        V(fullCount);
        printf("Producer: %s\tproduce: %d\te: %d\tf: %d\tSize:%d\n"
            , get_curr_name()
            , item
            , smphr_get_size(emptyCount)
            , smphr_get_size(fullCount)
            , current);
    }
}

void consumer(){
    int item = 0;
    int i = 0;
    while(i &lt; 30){ 
        P(fullCount);
        P(useQueue);
        if (current &gt; 0) {
            item = buffer[--current];
        }
        V(useQueue);
        V(emptyCount);
        printf("Consumer: %s\tconsume: %d\te: %d\tf: %d\tSize:%d\n"
            , get_curr_name()
            , item
            , smphr_get_size(emptyCount)
            , smphr_get_size(fullCount)
            , current);
        i++;
    }
}

int main(int argc, char *argv[]){
    int i,j;
    lwt *t;
    emptyCount  = smphr_create(N);
    fullCount   = smphr_create(0);
    useQueue    = smphr_create(1);

    lwt_init(QUANTUM);

    lwt_create("p1", 0, NULL, producer);  
    lwt_create("p2", 0, NULL, producer);  
    lwt_create("p3", 0, NULL, producer);  
    lwt_create("p4", 0, NULL, producer);  
    lwt_create("c1", 0, NULL, consumer);     
    t = lwt_create("c2", 0, NULL, consumer);     

    thrd_wait(t);
    printf("Two Consumers consume 30 items!\n");
    printf("Done!\n");
}
</code></pre>

<p>The full code is on <a href="https://github.com/GingerBear/LWT">github</a>. Thanks to <a href="https://github.com/cadmuxe">cadmuxe</a> and <a href="https://github.com/liyangbin">liyangbin</a> for the help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building the IS Reader]]></title>
    <link href="http://GingerBear.github.io/blog/2013/10/28/building-the-is-reader/"/>
    <updated>2013-10-28T02:16:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2013/10/28/building-the-is-reader</id>
    <content type="html"><![CDATA[<p>It has been a few weeks that I am thinking about writing a blog on the IS Reader project. In this post, I will try to answer:</p>

<ul>
<li>Why did I start the project?</li>
<li>What will the product be functioning like?</li>
<li>How did I or will I deal with it?</li>
<li>What are the design rules that I am following?</li>
</ul>


<h2>Why did I start the project?</h2>

<p>There are a lot of reasons that finally lead me to build this reader. First and most importantly, When I reading some long documents, like a book, I found myself need a sample tool that can store a pdf document online, and everytime you open it on different devices, it will restore the previous page you read. I went throught a series of search but didn&rsquo;t find a sample solution. Kindle App may work but not allow pdf uploads. Dropbox and Google Drive show pdf cross device but cannot restore the progress, no need to say annoating or sharing. Foxit reader can restore but only work locally.</p>

<p>The secend reason is that, I was happened to take an independent study with Peter&rsquo;s, our program head, phd student Julio, who took me to the ReadingCycle project. It is also a reader project, but only work for picture format books. So it is a good change to do it along with the IS Reader. (Actually IS Reader the name came with the inital of School of <em>Information Science</em>, but not limit to that.)</p>

<p>Thirdly, I am on my way finding a job, this project will be a great enhancement of my experience and CV. I will try a lot of new technologies that could be written on my CV.</p>

<p>Finally, there is no such a product on the web and it is not that hard to build, so why don&rsquo;t I create one. Maybe it will grow into a real deal.</p>

<h2>What will the product be functioning and look like?</h2>

<p>On the first thought, the product is pretty sample. I can upload pdf documents on it, read it, restore the page on other devices and continue reading. By further thinking, it should support multi-user, not just me alone. Then it should provide a certain management page that can CRUD those documents. Next, it should allow user to annotate on the document. Finally, social stuff. User can share documents, notes with each other. They can track their progross. Product can even provide some kind of stratagy that my drive user to reader more, like comparing, gamification.</p>

<p>At this moment of my typing, I am thinking the goal of the product should be to <strong>make people more like to read</strong>, or to learn, since I read for learn.</p>

<h2>How did I or will I deal with it?</h2>

<p>As I mentioned, the article should be typed several weeks ago, which means I have started working on it for several weeks (19 days since its github inital commit). I choosed all those new technology from the begining. At the begining scaffolding stage, I user Yeomen to genate a express project and a webapp (merged in the middle of developing, cover later).</p>

<p>I use pdf.js for the JavaScript-based pdf rendering. Although its rendering is a bit not that sharp on windows, it is good enough for long time reading. Not surprisingly, it renders perfectly on MacBook Pro with Retina display (need to fix the scale issue), the one I just bought, and better on mac with no-Retina than windows.</p>

<p>For the server, I use Express on Node.js, Mongoose and MongoDB for the database, Jade for the template engine. In fact, I tried to build a pure RESTful for the server, so I didn&rsquo;t use Jade at the first time. But met a lot of issues. First I came across some cross-domain issue on the cross ajax call from the client. I tried jsonp and cors to fix it. Then I didn&rsquo;t find a way to validate user session in a rapid way except cookies (I don&rsquo;t have experience with OAuth). So I gave up the RESTful option, in order for the quick shipping.</p>

<p>For the client side, most code I wrote is about the reader page. The logic is sample and old-fashion, just some event binding and ajax call, store data in the dom. What&rsquo;s new is that I try to use some new JavaScript techniques. I use event delegation of those massive event bindings. I wrap the whole reader JavaScript logic in a constructor, which construct the JavaScript by parameters, hide internal private parameters and methods, and get inited by init(); Some progress was made, but way not enough. The code is close to spaghetti, dom bindings are hard coded inside. I am extremely want to make it modular and less coupled, maybe after a big release.</p>

<p>Now, basic funcitons till making note are made. Next thing should be involved with some social, with OAuth bulid in, and books management with one-page app style (AngularJS or BackboneJS).</p>

<h2>What are the design rules that I am following?</h2>

<p>It is too late now, let me be short. For the design, 3 rules:</p>

<ul>
<li>Rule 1: As easy to use as possible</li>
<li>Rule 2: As less reading interuption as possible</li>
<li>Rule 3: As clean and sample as possible</li>
</ul>


<h2>Summary</h2>

<p>Use the most quoted facebook works:</p>

<blockquote><p>Keep Focus and Keep Shipping</p></blockquote>

<p>That is all I need to do, no need to think to far. No matter what will the product be in the future, it has a good start, namely I build it for myself use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主机对比总结]]></title>
    <link href="http://GingerBear.github.io/blog/2013/07/18/%25e4%25b8%25bb%25e6%259c%25ba%25e5%25af%25b9%25e6%25af%2594%25e6%2580%25bb%25e7%25bb%2593/"/>
    <updated>2013-07-18T00:00:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2013/07/18/%e4%b8%bb%e6%9c%ba%e5%af%b9%e6%af%94%e6%80%bb%e7%bb%93</id>
    <content type="html"><![CDATA[<strong>1. 选择虚拟主机，VPS，还是云平台？</strong>

虚拟主机，也就是Web Hosting，类似于000，与其他人共享一个OS环境。
<ul>
	<li>优点：便宜，配置方便。</li>
	<li>缺点：不稳定，速度较慢，限制多。</li>
</ul>
VPS，Virtual Private Server，在一台设备上虚拟出的多个OS环境，用户能独享一个OS。
<ul>
	<li>优点：稳定，自由（能拥有root权限），安全。</li>
	<li>缺点：需要手动安装程序，需要linux维护。</li>
</ul>
云，“如果云不是指弹性云&#8230;..那单机云就是vps&#8230;..“，“弹性云就是可以自由调整配置， 可以制作模板动态扩容/缩减， 按时按需计划，提供多节点自动的动态负载均衡” <span style="text-decoration:underline;"><a href="http://www.hostloc.com/thread-194935-1-1.html">http://www.hostloc.com/thread-194935-1-1.html</a></span>

<strong>2. AWS(云), Azure(云), Linode(VPS) 参数对比</strong>
<div>
<table width="100%" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top"></td>
<td valign="top">  AWS Free Tier</td>
<td valign="top">Azure Extra Small</td>
<td valign="top">Linode 1G</td>
</tr>
<tr>
<td valign="top"><strong>RAM</strong></td>
<td valign="top">  613MB</td>
<td valign="top">768M</td>
<td valign="top">1GB</td>
</tr>
<tr>
<td valign="top"><strong>CPU</strong></td>
<td valign="top">  N/A</td>
<td valign="top">shared</td>
<td valign="top">8 cores</td>
</tr>
<tr>
<td valign="top"><strong>Storage</strong></td>
<td valign="top">  30G</td>
<td valign="top">20G</td>
<td valign="top">24G</td>
</tr>
<tr>
<td valign="top"><strong>Database</strong></td>
<td valign="top">  20G</td>
<td valign="top">N/A</td>
<td valign="top">N/A</td>
</tr>
<tr>
<td valign="top"><strong>Transfer</strong></td>
<td valign="top">  15G</td>
<td valign="top">5G free, $0.12/GB(5G-10T)</td>
<td valign="top">2T</td>
</tr>
<tr>
<td valign="top"><strong>Cost</strong></td>
<td valign="top">  1-year free/ charge on demand</td>
<td valign="top">15/m</td>
<td valign="top">20/m</td>
</tr>
<tr>
<td valign="top"><strong>*</strong></td>
<td valign="top">  1-year free means 750 hours CPU (<span style="text-decoration:underline;"><a href="http://python.6.x6.nabble.com/CPyUG-OT-Amazon-EC2-VS-Linode-td2730701.html">普遍反映贵</a></span>, <span style="text-decoration:underline;"><a href="http://www.quora.com/Amazon-Web-Services/How-much-does-it-cost-for-a-similar-linode-instance-on-EC2">略复杂1</a></span>, <span style="text-decoration:underline;"><a href="https://forum.linode.com/viewtopic.php?t=9885&amp;p=57731">略复杂2</a></span>)</td>
<td valign="top">Extra Small 有5Mbps 带宽限制，Small则要45/m</td>
<td valign="top">纯净Linux, 所有东西需要自己配置</td>
</tr>
</tbody>
</table>
</div>
<strong>3. 方案</strong>

先使用$200的Azure的Web Site，再使用Linode的VPS，因为

1）需要快速上线，Azure的Web Site现在已经部署上线，Linode需要在命令行配置LAMP运行环境，AWS配置更加复杂。

2）开始访问量低，Azure的Shared Web Site应该能够应付，尽管性能较低。

3）Azure能够应付突发的访问量，尽管超出定额后会收费较高。

4）Linode的口碑最佳，稳定高速，简单易于维护，适合中小应用。

5）如果以后访问量巨大，可再迁移到功能更强大的AWS。

6）$200不用白不用。
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experimental Summer Life]]></title>
    <link href="http://GingerBear.github.io/blog/2013/05/23/experimental-summer-life/"/>
    <updated>2013-05-23T00:00:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2013/05/23/experimental-summer-life</id>
    <content type="html"><![CDATA[还是写中文吧。

从五月到八月，本来是打算找个地方实习的，然后再选一门课，下学期就可以part-time，但并未如愿以偿。之前与Interactive System Design这门课中的项目合作单位Department of Oral Biology in School Of Dental Medicine联系了实习，对方也给出了积极的回应，但不巧对方教授出差，等她回来后距离选课（申请CPT）的日子只有不到一周，随即她告诉我在截止日期前完成实习手续已无可能。实习便只能作罢。

然后就是自己两周低落的无所事事，每天打篮球，看季后赛，看电影，看书，生活毫无规律。心想这个四个月要是这么过，毕业找工作什么就别想了，更别谈什么梦想志向了。不在于四月有多么重要，而在于对自己管不住自己感到失望，从而失去了自信。

倔强的我于是觉得自己该做点该做的，坚持四个月，一定能改变自己。于是便有了这篇本想要英文写的文字，试验性的暑假生活。“实验性”第一是因为自己打算过一次从来没过过的暑假（可能是最后一个暑假），第二因为自己想过一种激进的生活，看看自己的level到底能到多少。

我认为自己是有天赋了，在各个方面达到远胜现在的高度。比如篮球，比如技术，比如自信，比如vision。事实并不残酷，我只是没有尽力，没有管住自己。我要证明我能能够做到。

首先是肥胖，自制力差的最直观表现。在这两周的无所事事中，体重飙升，几乎到达了90公斤，原因主要是没有控制住饮食，再加上脚伤，篮球也并没有坚持每天打。其实要减肥也很简单，生活规律，控制饮食，保持锻炼。所以在这个暑假里，我要做到日常饮食以水果，蔬菜，面包以及少量肉类为主，stay real hungary，把体重控制到75以内。每天早上坚持跑步，做力量训练，周二周五打篮球。每天一点以前睡觉，早上七点起床。

然后是学习，主要是技术上的学习。四个月的时间可以学习很多东西，但目标很明确，Google的要求是什么就学什么。下面是Google Front End Engineer的要求
<div>Minimum qualifications</div>
<div>
<ul>
	<li>BS degree in Computer Science or related field (In lieu of degree, 4 years of relevant work experience).</li>
	<li>Development experience in server-side technologies such as C/C++ and/or Java.</li>
	<li>Experience with AJAX, HTML and CSS, or Ruby, with an interest in user interface design.</li>
	<li>Web application development experience.</li>
</ul>
</div>
<div>
<div>Preferred qualifications</div>
<div>
<ul>
	<li>Masters or PhD in Computer Science or related field.</li>
	<li>Significant experience developing user-facing software.</li>
	<li>Experience working on cross-browser platforms.</li>
	<li>Knowledge of UI frameworks such as XUL, Flex, and XAML.</li>
	<li>Object-oriented JavaScript skills.</li>
</ul>
</div>
</div>
明显不足的一点是一门Server-Side的语言，比如Java，在很多笔试题中Java也经常会使用到。

所以第一件事情是学习Java，学到什么程度，第一是写一个OOP的博客，第二是熟练使用Java写算法题。

第二重要的应该是深入了解JavaScript，对于JavaScript的语言特性，面向对象机制，模块化，主流框架，NodeJs都应该到底master的程度。学习的途径第一是看书，手上的几本书在四个月内都应奋力读完，做好读书笔记。途径二是参加开源项目，从那篇学习开源项目的文章开始看起。

第三和第四同等重要，即计算机基础知识与前端基础知识。计算机基础知识包括Linux和C语言，重读Linux和C一站式编程，了解服务器，编译器，浏览器内核的底层实现原理。第四是前端基础知识，包括CSS的深入学习，CSS3与HTML5的新特性，浏览器兼容性的知识。

第五和第六同等重要，即设计的学习与知识杂项。设计一直是我很向往的方向，但始终都处在感性的认识阶段，未来我隐约感觉到自己会走上“设计师”的道路，但开始，还是从Engineering入门会更加基础牢固，所以在暑假的闲暇时间里读一些设计方面的名著是很有益的。知识杂项就就包括了一些必要的但了解即可的知识，比如Git，不如Ruby，比如Sayanee的Vimeo，以及一些讲座。

总结成一份List，暑假每天应该这么过：

身体方面：
<ul>
	<li>7点起床，晚上1点之前睡觉</li>
	<li>早晨跑步，力量训练，周二周五晚上打篮球</li>
	<li>饮食规律，水果蔬菜为主</li>
</ul>
知识方面：
<ul>
	<li>8小时学习时间</li>
	<li>制定每月每周每日目标</li>
	<li>2小时读书</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[暑假学习第一天]]></title>
    <link href="http://GingerBear.github.io/blog/2013/05/23/%25e6%259a%2591%25e5%2581%2587%25e5%25ad%25a6%25e4%25b9%25a0%25e7%25ac%25ac%25e4%25b8%2580%25e5%25a4%25a9/"/>
    <updated>2013-05-23T00:00:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2013/05/23/%e6%9a%91%e5%81%87%e5%ad%a6%e4%b9%a0%e7%ac%ac%e4%b8%80%e5%a4%a9</id>
    <content type="html"><![CDATA[积极地说，感觉还不错，虽然做的还远不够好。

由于昨天睡得晚，今天9点才起来，但早晨状态不错，并不困，简单吃了早餐和锻炼后，开始干正事儿。实际上这个时间是一天最佳的时间，所以应该花在最重要的事情上，但惰性使然，导致自己看起了vimeo的教学视频，一看就看了好多。略看了一下已知的知识，包括sublime tex, wordpress, web font。了解了一种格式语言Markdown，使用在github的readme中，通过ruby能够自动转化成HTML。还了解到了sublime text的package manager，下载的sass的代码高亮。最主要的是学习了一下SASS。

<strong>SASS最主要的是三个功能：变量，方法，循环。</strong>

使用美元符号$定义变量，可以定义统一的颜色，宽度，让CSS更容易维护。

使用@mixin定义方法，在方法体内写入复用CSS，可以传递参数，使用@include调用。这使得按钮，widget很容易实现，配合变量，使得样式的主题很容易修改。

循环的格式为
<blockquote>@for i from 1 through 9</blockquote>
缩进的内容为循环体。循环可以实现渐变的样式，但我觉得用处不大。

<strong>另外SASS的使用规则还有：</strong>
<ul>
	<li>不需要大括号，使用缩进</li>
	<li>可用用缩进加$重复利用某一元素，类似于JavaScript的with关键字</li>
	<li>一些函数darken(#ccc, 10%), lighten(#ccc, 10%)</li>
</ul>
从sass &#8211;watch产生了小想法。watch能使.sass每次有变化的时候会自动编译成.css文件，那么，做web开发的时候，每当完成某个页面的时候，当自动保存sublime text后能不能自动刷新浏览器呢？这会带来一些方便。

很快就到午饭时间了，吃了牛肉青椒番茄丁拌米线，半小时搞定。打算下午考驾照permit，开始做题，到了快两点出门结果下大雨，走了不远便打道回府。开始干“正事儿”。进入状态很慢，Java读着读着就容易走神，容易去看别的东西。看着看着觉得Java学习内容太多，太难肯，并且在web方向用的不多。并且越来越觉得Python更加适合，应用更广，更新，与web更近。回头再把Java扔到了一边开始找Python的书看，挑了不少时间结果很不明智地挑一本cookbook，鼓足一股劲开始啃了一起来，终于啃到正题了，结果发现根本就不是我需要的，都是一些细节函数的用法，没法读只能用来查。又扔到了一遍。又找了一圈要么太基础，要么太专，要么太老。我开始上网找网上的学习资料，结果看到了<a href="http://www.learnpython.org/">http://www.learnpython.org/</a> 就又鼓起劲开始学了起来，非常基础但让我熟悉其语法来了，也加上了一些小coding，很快就把基础知识过了一遍。

想尝试做几道leetcode题目但对于Java还是太不熟悉，无从下手。

就这么已经晚上11点了。最正题的JavaScript还没看。

&nbsp;

虽然没完成任务，但状态感觉还是有很大进步的，后面抓紧分配好时间，提前在google calendar上制定好时间。
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox + Git 多人协作]]></title>
    <link href="http://GingerBear.github.io/blog/2013/02/13/dropbox-git-%25e5%25a4%259a%25e4%25ba%25ba%25e5%258d%258f%25e4%25bd%259c/"/>
    <updated>2013-02-13T00:00:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2013/02/13/dropbox-git-%e5%a4%9a%e4%ba%ba%e5%8d%8f%e4%bd%9c</id>
    <content type="html"><![CDATA[<div>
<h1><strong>背景： </strong></h1>
</div>
一个人开发项目到了一半，想多拉几个人过来一起开发。
<h1><strong>使用顺序： </strong></h1>
<h2><strong>（一）我先配置好公共的repo。</strong></h2>
1. 在Dropbox上创建一个文件夹作为共享的空repo：
<pre><span style="color:#999999;"> $ cd C:/Users/Neil/Dropbox/</span>

<span style="color:#999999;"> $ mkdir Git-Repository/MyProject1.git</span>

<span style="color:#999999;"> $ cd Git-Repository/MyProject1.git</span>

<span style="color:#999999;"> $ git init --bare

</span></pre>
2.  把原来本机上项目放到到那个共享的repo里：
<pre><span style="color:#999999;"> $ cd C:/User/Neil/Projects/MyProject1</span>

<span style="color:#999999;"> $ git init</span>

<span style="color:#999999;"> $ git remote add origin C:/Users/Neil/Dropbox/Git-Repository/MyProject1.git</span>

<span style="color:#999999;"> $ git add .</span>

<span style="color:#999999;"> $ git commit -m "first commit."</span>

<span style="color:#999999;"> $ git push origin master</span></pre>
<h2></h2>
<h2><strong>（二）新加进来的开发们在本机clone一份。</strong></h2>
<span style="color:#999999;">注意：在操作git之前，先config好自己的user.name和user.email</span>

1. 创建本地目录，把Dropbox共享到的repo clone到里面。
<pre><span style="color:#999999;"> $ cd C:/User/Eric/Projects/</span>

<span style="color:#999999;"> $ git clone C:/Users/Eric/Dropbox/Share/MyProject1.git</span></pre>
<h2></h2>
<h2><strong>（三）开始日常开发。</strong></h2>
1. 获取最新的版本：
<pre><span style="color:#999999;"> $ cd C:/User/Eric/Projects/MyProject1</span>

<span style="color:#999999;"> $ git pull origin master

</span></pre>
2. 完成一个小功能后，commit一个版本到本地的repo：
<pre><span style="color:#999999;"> $ git add .</span>

<span style="color:#999999;"> $ git commit -m "comment on this commit"

</span></pre>
3. 完成一个大功能后，把本地的repo push到共享的repo里：
<pre><span style="color:#999999;"> $ git add .</span>

<span style="color:#999999;"> $ git commit -m "comment on this commit"</span>

<span style="color:#999999;"> $ git push origin master</span></pre>
<h2></h2>
<h2><strong>另外：</strong></h2>
可能会遇到冲突，因为在你pull最新版本下来之后，又有人push了更新的版本到共享repo里，而且他修改了跟你相关的代码。因此当你现在push的时候会出错，因为共享repo也不知道用他的代码好还是你的代码好。这时就git就会要求你在push之前再pull一次，并且会告诉你冲突的地方，在具体文件中会以下面这种方式体现：
<pre><span style="color:#999999;"> &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>

<span style="color:#999999;"> 我的代码</span>

<span style="color:#999999;"> ===========</span>

<span style="color:#999999;"> 他的代码</span>

<span style="color:#999999;"> &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></pre>
我需要把这段代码解决（跟他商量怎么回事儿）之后在push到共享的repo。

（完）
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[备忘ebay的一个讲座]]></title>
    <link href="http://GingerBear.github.io/blog/2013/02/13/%25e5%25a4%2587%25e5%25bf%2598ebay%25e7%259a%2584%25e4%25b8%2580%25e4%25b8%25aa%25e8%25ae%25b2%25e5%25ba%25a7/"/>
    <updated>2013-02-13T00:00:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2013/02/13/%e5%a4%87%e5%bf%98ebay%e7%9a%84%e4%b8%80%e4%b8%aa%e8%ae%b2%e5%ba%a7</id>
    <content type="html"><![CDATA[<strong>演讲人</strong>：Brain Johnson@ebay

<strong>主题</strong>：ebay的大数据

<strong>最大印象</strong>：努力很大，投入很多，但效果一般（5% better / year）

<strong>片段</strong>：

&#8220;big is not the case, detail is.&#8221;

关于 搜索key word expansion，他讲了很多情况中是不是要把搜索关键词的相关词也纳入搜索范围，比如加s的复数。但在会出现加了s就是毫不相关的东西，例子忘了。另外，在人们搜索diary的时候，很多人想找的是吸血鬼日记，而不是笔记本。在人们搜索basketball的时候，大多数人想找的是篮球鞋，而不是篮球。我的第一影响力可以用搜索后，点击商品的类别来自动划分不同key word的expansion。

他还略过了一句话，其实也是我很想问的。那就是他说算法不重要（大概意思），数据更重要。为啥？

刚开发的时候，ebay投了几千万美元（具体忘了），结果由于所带来的改进，几个月（具体忘了）就赚回来了。看来有和无的差别是巨大的。
<div>
<div>他还分享了任务的data flow pipeline:</div>
<div>
<ul>
	<li>production</li>
	<li>behavioral item data analysisi</li>
	<li>feature generation</li>
	<li>classification prediction</li>
	<li>offline analysis</li>
	<li>human judgment</li>
	<li>a/b test</li>
</ul>
（完）

</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写学习笔记]]></title>
    <link href="http://GingerBear.github.io/blog/2012/09/29/%25e5%2586%2599%25e5%25ad%25a6%25e4%25b9%25a0%25e7%25ac%2594%25e8%25ae%25b0/"/>
    <updated>2012-09-29T00:00:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2012/09/29/%e5%86%99%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0</id>
    <content type="html"><![CDATA[最近在学不少东西，一直想写一下学习笔记，但都出于很多原因，主要是懒惰，没有付出实践。

学了很多东西，需要消化。写学习笔记是很好的一种消化方式，能够让人温习学过的知识，并且用自己的语言重新描述一遍后，能够更好的理解知识。

事实上我最近学习的知识也的确需要不断消化。Coursera上的Machine Learning课程有很多新的东西需要我去记忆与理解，每一节课都包含了很多复杂的公式与原理。经常听课的当时理解了，但很快就忘了。不如最近学到的Neural Network的原理就没有完全搞懂，之前的Linear Regression和Logistic Regression也不能立刻反映出实施步骤，中间总有知识断层。

于是，在接下来的Blog中，我将从Neural Network的手写数字识别联系开始写Machine Learning的学习笔记，一直到最后。如果有多余的心思的话，把前面的也补上。

另外，MIT的Python课程已经学完，一直想着实开发一个实际的项目，关于项目的构想与进展，我也将在Blog里谈谈。另外几门课程数据库与数据结构的课程也需要学习，在今天不小心又看了一遍阮一峰写Dennis Ritchie逝世的Blog后得知，我们的教程C Programming就是他写。于是产生了看完这本书的打算（反正比Python的书还薄）。所以同样我也打算写写这本书的读书笔记，也包括Python的本书。

说到读书，之前的Hackers and Painters也读了一半了，但依旧停下了一周左右。其实在读书的过程中的确是有不少想法的，但也没有下意识的把这些想法记录下了。

<span style="text-decoration:underline;">总结一下：</span>

学习笔记：Machine Learning

项目笔记：Python的项目

读书笔记：H&amp;P，C Programming，Think Python

<span style="text-decoration:underline;">后续计划：</span>

学习笔记：Coursera里的其他课程，JavaScript学习

项目笔记：新的项目

读书笔记：Think Complexity，JavaScript The Good Part，Professional JavaScript.

<span style="text-decoration:underline;">New idea</span>: Try to write in English.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二手相机试拍与沃尔玛购物]]></title>
    <link href="http://GingerBear.github.io/blog/2012/09/17/%25e4%25ba%258c%25e6%2589%258b%25e7%259b%25b8%25e6%259c%25ba%25e8%25af%2595%25e6%258b%258d%25e4%25b8%258e%25e6%25b2%2583%25e5%25b0%2594%25e7%258e%259b%25e8%25b4%25ad%25e7%2589%25a9/"/>
    <updated>2012-09-17T00:00:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2012/09/17/%e4%ba%8c%e6%89%8b%e7%9b%b8%e6%9c%ba%e8%af%95%e6%8b%8d%e4%b8%8e%e6%b2%83%e5%b0%94%e7%8e%9b%e8%b4%ad%e7%89%a9</id>
    <content type="html"><![CDATA[到美国一个月了，之间一直想写点什么但都没有付出实际行动，有时由于忙，但更多是由于懒。今天在不忙又不懒的状况下开始写点东西。

写到这里，不禁自己问，自己为什么今天就不懒了？实际情况是我看到Hacker News上的一篇文章”<a title="THINGS I’VE QUIT DOING AT MY DESK" href="http://justinjackson.ca/i-quit-my-desk/">THINGS I’VE QUIT DOING AT MY DESK</a>“，讲的是作者清楚地区分自己在办公桌前做的正事儿与浪费时间的琐事儿，他甚至不用椅子。说到底，方法很简单，主要是意志力。看完文章后，我试图集中精力学习Coursera上的<a title="Machine Learning教程" href="https://class.coursera.org/ml-2012-002">Machine Learning教程</a>，效果确实好了些，但实际上仍然不自觉地打开微博人人FBQQ看看，更有可能的是，明天我就忘了这事儿，继续之前的懒散状态。

好在现在才残留了一些定力足以让我打开WP写点东西。

开始正题吧，主要写写一次很平常的沃尔玛的购物经历，我用即将退货的二手相机记录下了这一天的过程，对应着照片，谈谈平常日子里美国与中国的一些不同。照片以时间顺序出现。

<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.19.541.jpg"><img class="aligncenter size-full wp-image-89" title="Frank的房间" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.19.541.jpg" alt="Frank的房间" width="864" height="648" /></a>

出门之前，我略显兴奋，拿起相机到处乱拍。这是Frank的房间，来自温州的高富帅，光看桌上的iPad，MBA以及华硕的游戏本便知。他还买了一个硕大的充气沙发，其实看起来比坐上去舒服，不过Frank确实比我们三个都更懂享受。这个房间是四个房间里最舒服的一个，光线充足，窗外就是公园，每天早上都能被阳光晒醒。

比较奇怪的是这边的空调，外面除了中央空调，到处安装的都是这种一体式的小空调，在上海，这种空调只有在老式住宅里才能看到。实际上这种空调噪音非常大，而且只能制冷，就是便宜，一百多刀一个。

[caption id=&#8221;attachment_91&#8221; align=&#8221;aligncenter&#8221; width=&#8221;600&#8221; caption=&#8221;楼下的Lei&#8221;]<img class="size-full wp-image-91" title="楼下的Lei" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.20.47.jpg" alt="楼下的Lei" width="600" height="800" />[/caption]

楼下Lei已经等我们很久，来自苏州在吉林读大学的喜欢憨笑的室友，他住在一楼，最大的房间，大得显得空旷但没有门，我们在教会领到的电视就放在他的房间，所以他的房间几乎就被我们当做客厅了。

整个房间铺上地板和地毯，而且很新，非常舒服。

[caption id=&#8221;attachment_92&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;厨房&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.22.02.jpg"><img class="size-full wp-image-92" title="厨房" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.22.02.jpg" alt="厨房" width="800" height="600" /></a>[/caption]

进门就能看到漂亮的厨房。虽然可以看出当时没有整理过，但依旧让人觉得很舒服。刚来的时候我很吃惊厨房里齐全的设备，连洗碗机这种我从没见过的机器都有（电饭煲下），而且都是新的。

与国内不太一样的是这里的炉灶，在照片的左边的”蚊香盘“就是了，火很小，没有抽油烟机。

这里还有齐全的报警器，一楼的窗上都装有。只要窗户被打开就会发出很大的警报声。另外还有烟雾报警器，又一次Lei煎牛排油烟太大居然引发了警报。

[caption id=&#8221;attachment_93&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;门口的路&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.22.39.jpg"><img class="size-full wp-image-93" title="门口的路" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.22.39.jpg" alt="门口的路" width="800" height="600" /></a>[/caption]

比起上海，这里的路面修的并不好，但很干净，没有乱扔的垃圾。每周二每户都会自觉的把垃圾打包好放在门口，会有收垃圾的人来处理。

前面住着一家和蔼的老头叫Steve，每次见到都会跟他聊上几句。他总会给我们介绍周围的情况和一些习俗，他非常热心很乐意给我们提供帮助。我也很希望跟他老人家聊聊天，但每次总觉得怪怪的，不知该如何交流，好像进入不了那种”坐下来好好聊聊“的状态。他还养了一条狗叫Moly，个头很大的一只母狗，见到人就会大叫，但待人其实很好，我也尝试着去摸摸它，其实从来都没这么摸过狗。

[caption id=&#8221;attachment_94&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;Lei站在门口&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.22.51.jpg"><img class="size-full wp-image-94" title="Lei站在门口" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.22.51.jpg" alt="Lei站在门口" width="800" height="600" /></a>[/caption]

Lei悠哉地站在门口等他们俩，这样子很像房子的主人。

[caption id=&#8221;attachment_96&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;连体别墅&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.23.44.jpg"><img class="size-full wp-image-96" title="连体别墅" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.23.44.jpg" alt="连体别墅" width="800" height="600" /></a>[/caption]

隔壁应该也住着几个留学生，已有过一次交流，听得懂中文但不会说。曾经看到过他们在家里开party，搞笑的是，我见到几个人在阳台上聊天，过了四五个小时，他们还在原地不动地聊天，不知道来外的party到底是怎么样的。

[caption id=&#8221;attachment_97&#8221; align=&#8221;aligncenter&#8221; width=&#8221;600&#8221; caption=&#8221;房子侧面&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.24.33.jpg"><img class="size-full wp-image-97" title="房子侧面" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.24.33.jpg" alt="房子侧面" width="600" height="800" /></a>[/caption]

从侧面看房子还是非常大的，从后院过去还有一个小露台，可以烧烤，晒太阳（经常看到老外这样）。

[caption id=&#8221;attachment_98&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;Eric与Lei&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.25.01.jpg"><img class="size-full wp-image-98" title="Eric与Lei" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.25.01.jpg" alt="Eric与Lei" width="800" height="600" /></a>[/caption]

Eric和Lei两人的表情展现出一个鲜活的场景。

Lei带着一个森海塞尔PX100，曾经一直想买但由于价格太高还是没行动。说起来我们四个都有点耳机控，Frank刚来没多久就买了一个Beats Studio，Eric至少有4副不同类型耳机，我也不知道换了多少耳机了。

[caption id=&#8221;attachment_99&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;路&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.27.21.jpg"><img class="size-full wp-image-99" title="路" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.27.21.jpg" alt="路" width="800" height="600" /></a>[/caption]

出来的天气非常好，多云不热。左边是小小的植物园，右边是人家的出库与后院，经常能看到几个老头躺在后院的躺椅上光着膀子惬意地晒太阳。

说道天气，这里的特点概况就是，阳光明媚，昼夜温差大，雨下得突然。记得8月上海的那几天天气罕见的好，这里几乎每天都是那么好。

[caption id=&#8221;attachment_101&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;街道&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.29.07.jpg"><img class="size-full wp-image-101" title="街道" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.29.07.jpg" alt="街道" width="800" height="600" /></a>[/caption]

这条路叫Parkview St.，可以猜得出，右边的房子里能看到Park的view应该才叫这么名字。路边停满了车，每家门前的花园都修得很整齐。经常能看到人们在修剪草坪，浇水装饰，小孩儿在上面玩耍。

想到了电影Flipped里，女主角家门口的草坪一直没人打理而被对面的邻居鄙视，不知者是不是大家勤于打理的原因之一。

[caption id=&#8221;attachment_102&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;Jeep&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.29.44.jpg"><img class="size-full wp-image-102" title="Jeep" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.29.44.jpg" alt="Jeep" width="800" height="600" /></a>[/caption]

这里Jeep Wrangler很常见，在这条路上就经常能看到停着好几辆。这车确实很Cool，但很多停在路边都没有敞篷，直接把驾驶座露在外面。

[caption id=&#8221;attachment_103&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;教堂&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.31.36.jpg"><img class="size-full wp-image-103" title="教堂" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.31.36.jpg" alt="教堂" width="800" height="600" /></a>[/caption]

St George Antiochian Orthodox Cathedral，刚来的时候还以为是清真寺。在单词本上背到的三个教堂的单词：Chapel, Church, Cathedral。本以为都会以大小区分，但事实上是随便叫的。比如这叫小教堂就叫Cathedral，但Cathedral of Learning旁边的Heinz Memorial Chapel比这个大多了确叫Chapel。

[caption id=&#8221;attachment_104&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;摩托&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.33.01.jpg"><img class="size-full wp-image-104" title="摩托" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.33.01.jpg" alt="摩托" width="800" height="600" /></a>[/caption]

这边儿骑摩托的确实比开车的酷，更别说载着美女开这么酷的摩托了。我猜这哥们的这时感觉一定非常良好。

[caption id=&#8221;attachment_106&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;加长版&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.37.22.jpg"><img class="size-full wp-image-106" title="加长版" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.37.22.jpg" alt="加长版" width="800" height="600" /></a>[/caption]

这边儿的好车并不多，多是美式肌肉车和日韩省油车，这辆凯迪拉克的加长车倒是第一次见到。

说到车，对这里印象最深的就是驾驶员都非常的文明，在每个没有红绿灯的路口，司机都会自觉停下来，确认没车才会经过。看到有行人要过马路，车都会立刻停下来，很耐心的等人过，在行人在犹豫时，驾驶员会伸手示意让行人先走。

第二点就是这里没车的人，那真就是穷人。因为这里的车非常便宜，几千块就可以买辆不错的二手车，只有是有正常工作的人应该都买得起。由于大部分的人都有车，很多服务都为车专门设计，不如很多快餐店都有开车专用窗口。很多大得卖场都设有巨大的停车场和道路。这导致了没车的人去大卖场很不方便，我们刚来的时候就有这样的经历，那是刀机场的宜家和沃尔玛，几乎都没有给行人走的路。

[caption id=&#8221;attachment_107&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;公交&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.58.57.jpg"><img class="size-full wp-image-107" title="公交" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-12.58.57.jpg" alt="公交" width="800" height="600" /></a>[/caption]

这里的公交值得一提的就太多了，当然首先是学生卡可以免费乘，在刚来没卡的时候那是很贵的，一个区域内2.5刀，两个区域3.75刀，简直太贵了。二，如很多人所说，这里的公交不像有些地方都是黑人，没有那种”不安全“的感觉，反倒是大家都很友好。三，下车前要先先拉窗边的黄线，请求下车，不然司机就不会停。四，遇到行动不便的老人或残疾，车可以立刻降低底盘方便他们上下。五，后面一般不开，除非人非常拥挤。六，可以买往返票，能便宜一块多，但要在规定时间内返回。七，从中心地区到偏远地区是下车再付钱。

[caption id=&#8221;attachment_109&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;Mellon Institute&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-13.05.18.jpg"><img class="size-full wp-image-109" title="Mellon Institute" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-13.05.18.jpg" alt="Mellon Institute" width="800" height="600" /></a>[/caption]

每次经过这里都很想拍照，因为The Dark Knight Raises就是在这里拍的，想说的是拍摄的场景很奇怪。在电影中Bane是在Wall Street上指挥雇佣兵与警察斗争的，但当他与Batman PK的时候却是在这里的柱子前，Frank当时还看到了Fifth Ave。所以电影实际上是把两个取景地合在了一起。

[caption id=&#8221;attachment_110&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;桥上&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-13.32.59.jpg"><img class="size-full wp-image-110" title="桥上" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-13.32.59.jpg" alt="桥上" width="800" height="600" /></a>[/caption]

这里的水非常干净，看着非常舒服，不像国内的河。另外这里的桥非常多，据说是全世界第二多的地方，仅次于威尼斯了。教会的人当时开玩笑说，匹兹堡人想向世界证明他们是多么能炼钢。

[caption id=&#8221;attachment_111&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;walmart&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-13.50.20.jpg"><img class="size-full wp-image-111" title="walmart" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-13.50.20.jpg" alt="walmart" width="800" height="600" /></a>[/caption]

其实匹兹堡是小地方，别看沃尔玛都建在郊外，实际上公交十几二十分钟就到了。周围是各种糖果，看着眼馋，但我减肥就忍住了没买。

说起价格，如果我赚美元，买东西就真便宜。旁边一袋巧克力，两块多。但如果是人民币，大部分都乘以六点几都很贵。小部分乘以六点几都比国内便宜的也有，比如牛奶，橙汁，提子，西柚，香蕉等等。

[caption id=&#8221;attachment_113&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;电视&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-14.10.54.jpg"><img class="size-full wp-image-113" title="电视" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-14.10.54.jpg" alt="电视" width="800" height="600" /></a>[/caption]

都是SHARP的电视，居然有70寸。另外，在公共场所只要是有电视机的地方都在放橄榄球。

[caption id=&#8221;attachment_114&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;Kindle&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-14.11.02.jpg"><img class="size-full wp-image-114" title="Kindle" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-14.11.02.jpg" alt="Kindle" width="800" height="600" /></a>[/caption]

沃尔玛里还有Kindle买，过几天就该换新Kindle了。我也第一次看到Nook，其实长得比Kindle漂亮而且便宜。

值得一提的是，Nook和Kindle一样都是有买书的做起的，是一家叫Barnes &amp; Noble的书店的产品。在国内以电子纸技术起家的汉王是不是已经快不行了？

[caption id=&#8221;attachment_115&#8221; align=&#8221;aligncenter&#8221; width=&#8221;600&#8221; caption=&#8221;Swift&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-14.27.49.jpg"><img class="size-full wp-image-115" title="Swift" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-14.27.49.jpg" alt="Swift" width="600" height="800" /></a>[/caption]

Taylor Swift，嗯，这个样子还是挺好看的。

[caption id=&#8221;attachment_116&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;巨型薯片&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-14.49.35.jpg"><img class="size-full wp-image-116" title="巨型薯片" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-14.49.35.jpg" alt="巨型薯片" width="800" height="600" /></a>[/caption]

这边见到不少超大号的东西，超大的汉堡，超大的三明治，超大的可乐，超大的薯片，超大的汽车，超大的。。。

难怪美国人能长那么胖了。

&nbsp;

[caption id=&#8221;attachment_117&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;擎天柱&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-15.14.57.jpg"><img class="size-full wp-image-117" title="擎天柱" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-15.14.57.jpg" alt="擎天柱" width="800" height="600" /></a>[/caption]

在路上总能看到巨大的卡车，每次都会惊讶的说，这不算擎天柱嘛。但这次看到的才是真正的擎天柱，连颜色都一样，可惜没来得及拍正面。

[caption id=&#8221;attachment_118&#8221; align=&#8221;aligncenter&#8221; width=&#8221;600&#8221; caption=&#8221;Wendy&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-15.25.13.jpg"><img class="size-full wp-image-118" title="wendy" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-15.25.13.jpg" alt="wendy" width="600" height="800" /></a>[/caption]

Frank肚子饿了没带钱，我只好带他去找吃的，这边也无法是这类垃圾食品。这个圣代还挺不错的。不过想说的是，坐了一会儿，手机收到了Google Latitude给我的Check-in提示，发现我到了Wendy问我要不要签到。一直觉得LBS应该还有很多应用。

[caption id=&#8221;attachment_119&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;停车场&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-15.51.26.jpg"><img class="size-full wp-image-119" title="停车场" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-15.51.26.jpg" alt="停车场" width="800" height="600" /></a>[/caption]

购物广场中的巨大的停车场，不过，应该是巨大停车场边的购物广场。

[caption id=&#8221;attachment_120&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;Frank&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-15.55.30.jpg"><img class="size-full wp-image-120" title="Frank" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-15.55.30.jpg" alt="Frank" width="800" height="600" /></a>[/caption]

在巨大的停车场里，Frank推着手推车，我们由衷的觉得有辆车该多方便。

[caption id=&#8221;attachment_121&#8221; align=&#8221;aligncenter&#8221; width=&#8221;800&#8221; caption=&#8221;返回&#8221;]<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-16.07.11.jpg"><img class="size-full wp-image-121" title="返回" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/09/2012-09-15-16.07.11.jpg" alt="返回" width="800" height="600" /></a>[/caption]

一般我们一周去一次大超市，所以一次要买很多东西，回来时把地方都占满了。其实这才是糟糕的开始。从车站到我们的住处有二十分钟路程，所以我们需要拎着一车东西走二十多分钟，里面包括一加仑的牛奶、果汁、花生油。到了宿舍，都累瘫了。

就先写到这里吧，太长了都写不动了。

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Neil的2012前半个月]]></title>
    <link href="http://GingerBear.github.io/blog/2012/01/14/neil%25e7%259a%25842012%25e5%2589%258d%25e5%258d%258a%25e4%25b8%25aa%25e6%259c%2588/"/>
    <updated>2012-01-14T00:00:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2012/01/14/neil%e7%9a%842012%e5%89%8d%e5%8d%8a%e4%b8%aa%e6%9c%88</id>
    <content type="html"><![CDATA[距离上一篇日记已经有半个月了，这半个月基本上就是在改善PS和提交网申，然后催老师发推荐信。PS还真是麻烦，有的要求1000字，有的要求500字，有的居然200字，让我改了又改。但感到庆幸的是，有勺山的帮我改逻辑，有老妈找的一个老美教授帮我改语言，谢谢你们，软条件上确实有不少提升。

改PS的过程中，有一点体会，就是中文和英文的差别不止是在文章语言上，整体结构上也有不同。我先把中文的PS写好，直接翻译成英文，就觉得很奇怪：不只是表达方式上，还在语句的衔接与逻辑上。同样句子与句子，段落与段落之间的转换，中文版的就读起来很顺，英文就觉得不同。为什么会这样，也许需要阅读量与实践的积累我才能搞清楚。

老爸买了个单反相机（基本上被我怂恿的），佳能600D，算是入门相机里不错的。最近在看Lynda.com的曝光教程，听这一个呆呆的大叔讲单反的原理，虽然讲得挺好，但还是有些枯燥。一直没有出门采光，就期待着过几天回黄陂了拍拍乡里的人和景。

<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/01/Untitled.png"><img class="aligncenter size-full wp-image-31" title="Untitled" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/01/Untitled.png" alt="" width="979" height="577" /></a>
<p style="text-align:center;">Lynda.com的曝光摄影教程 Ben Long</p>
另外，把手机刷成了xda论坛上的<a title="HTC Desire S Android 4.0 Rom beta" href="http://forum.xda-developers.com/showthread.php?t=1373449" target="_blank">大牛做的Android4.0</a>，细节上感觉很好（新UI、页面的过度效果、滑动的加速度），习惯了有快捷方式的Launcher后，就不需要像MIUI那种所有App放桌面的麻烦桌面布局了，除了桌面，其他都要比MIUI顺滑一些（可能是因为MIUI的桌面用了低质量的绘图）。虽然相机还没法用，不过先玩几天。

<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/01/IMG_0260.jpg"><img class="aligncenter size-full wp-image-32" title="IMG_0260" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2012/01/IMG_0260.jpg" alt="" width="519" height="346" /></a>
<p style="text-align:center;">HTC Desire S on Android 4.0 Ice Cream Sandwich</p>
&#8212;&#8212;&#8212;

看豆瓣日志坚持的最好的还是<a title="顾蘑菇的微博" href="http://www.douban.com/people/Annie-gu/" target="_blank">@顾蘑菇</a> ，膜拜。
不禁想起一个问题，我这日志是写给谁看的呢？
应该不只是自己看的，应该是不是完全写改别人看的（这部分是自己看的，不然应该用“写给你们看的”）。持这两种心态写出来的日志应该是很不同的，有时还是矛盾的，微博也是一样。可以看得出来，很多人写的明显是给别人看的，有些人写的明显是给自己看的。

那么我是写给自己看的呢？还是别人看的呢？一个很容易的答案就是“都是”。但是似乎写起来比起说起来就没那么简单那了，有时候经常碰到自己问自己“写这个干嘛？”，那写什么呢？

或者说，想那么多干嘛？只管写就是了，想写什么就写什么。好像很多事情都是这样。

（End | by Neil）
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的托福那点破事儿]]></title>
    <link href="http://GingerBear.github.io/blog/2011/12/02/%25e6%2588%2591%25e7%259a%2584%25e6%2589%2598%25e7%25a6%258f%25e9%2582%25a3%25e7%2582%25b9%25e7%25a0%25b4%25e4%25ba%258b%25e5%2584%25bf/"/>
    <updated>2011-12-02T00:00:00-05:00</updated>
    <id>http://GingerBear.github.io/blog/2011/12/02/%e6%88%91%e7%9a%84%e6%89%98%e7%a6%8f%e9%82%a3%e7%82%b9%e7%a0%b4%e4%ba%8b%e5%84%bf</id>
    <content type="html"><![CDATA[&nbsp;

<a style="font-style:normal;line-height:24px;text-decoration:underline;" href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2011/12/download.jpg"><img class="aligncenter size-full wp-image-26" style="border-style:initial;border-color:initial;margin-top:.4em;background-image:initial;background-attachment:initial;background-origin:initial;background-clip:initial;background-color:#eeeeee;" title="download" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2011/12/download.jpg" alt="" /></a>

托福成绩刚刚出来了，96分，总体来说勉强还算是个decent的分数（太低也不会写这玩意儿）。
所以今天主要说说托福那些破事儿。

Reading(R), Listening(L), Speaking(S), Writing(W)
第一次考试2010年5月16日：R:19 L:19 S:20 W:22 Total:80
第二次考试2011年8月13日：R:25 L:24 S:20 W:21 Total:90
第三次考试011年11月20日：R:21 L:28 S:23 W:24 Total:96<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2011/12/download.jpg">
</a>

<strong>阅读：状态最重要</strong>
就是把GRE从70年代开始所有的题都做完两遍以上，考托福照样不行，第二次25的原因是考前猛准备3周，把17个TPO的阅读做它两遍，才勉强达到25。第一次19考前做了两三套巴朗就受不了了。第三次就草草做了TPO的19、20、21、22、23、24，没掐时间，没定时间。所以阅读考前状态太重要了。

<strong>听力：要多练，与多练</strong>
丢掉笔记，要完全理解。就算貌似很难记住的细节，只要能搞清楚描写这个细节的目的，其实问到的时候是能回想起来的。

<strong>口语：使Trick</strong>
抛弃机经，坑人（所谓预测就是列出二三十个题目，那么大范围还不一定准）加给人心里负担（没准备到好就心神不宁的）。
Trick 1. 在考试的间隙（题与题之间不要点跳过，等自动跳过）把事先准备好的6个题目的模板抄到草稿纸上，考的时候，照着念。避免紧张导致忘了。
Trick 2. 开始阅读听力尽量拖时间，这样可以在休息的时候，听别人的口语回答，猜出题目，笃定地填入模板，考试时笃定的念就是了。（由于我拖太久了，以至于我休息的时候念的人太多，听不清楚题目）

<strong>作文：丢弃模板，注重表达方式</strong>
第三次作文，与前两次不同的是，由于基本没准备，所以感觉当时写作有点意识流，没有遵照严格和清晰的结构，但试图让表达流畅。
字数也不是想象中的那么重要，第二次字数最多，但分数最低。
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django项目小记]]></title>
    <link href="http://GingerBear.github.io/blog/2011/11/05/django%25e9%25a1%25b9%25e7%259b%25ae%25e5%25b0%258f%25e8%25ae%25b0/"/>
    <updated>2011-11-05T00:00:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2011/11/05/django%e9%a1%b9%e7%9b%ae%e5%b0%8f%e8%ae%b0</id>
    <content type="html"><![CDATA[<p style="text-align:center;"><a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2011/11/Untitled.png"><img class="size-full wp-image-19 aligncenter" title="Untitled" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2011/11/Untitled.png" alt="" width="834" height="314" />图</a>：通过Django编写的表单提交操作，使用Jpype调用Java类，运行Web-Harvest抓取新浪微博，存入MySQL的过程中，Web-Harvest的运行状态。</p>
<p style="text-align:left;">每次能看到这幅图片，就感到特别欣慰，特别是刚才的那次，感觉就像走完了一片沙漠看到了绿洲。</p>
<p style="text-align:left;">从三天前大致学会Django的基本原理，到现在集成Web-Harvest，MySQL，PyMining到Django并成功运行。的确是费了不少周折。下面罗列出能够回想起的问题与解决方法。</p>
<p style="text-align:left;"><strong>（1）问题：SQLite连接Web-Harvest中文乱码，databse插件无法执行多句SQL</strong></p>
<p style="text-align:left;">未解决：放弃SQLite，改用MySQL</p>
<p style="text-align:left;"><strong>（2）问题：XQuery输出SQL语句的格式MySQL读取失败</strong></p>
<p style="text-align:left;">解决：用XQuery的concat方法链接字符串与变量，使之构成完整SQL字符串。经过仔细追求，修改WebHarvest源代码，还是发现WebHarvest的database插件只支持执行依据SQL语句，于是退而求其次，用了笨办法，把database插件包含到loops里，也就是说，每执行一次SQL，就连接一次MySQL。这是没有办法的办法，不过考虑到系统不会有很多人使用，并且爬虫速度的短板在http的读取上，这还是勉强能接受的。</p>
<p style="text-align:left;"><strong>（3）问题：Web-Harvest连接MySQL，出现中文乱码</strong></p>
<p style="text-align:left;">解决：乱码无非是文件编码、数据库编码、连接的编码三者不一致导致的。所以，确定文件编码、数据库编码都是utf-8后，只有是连接的编码没有设置好了，记得在PHP里是用一句语句设置连接编码的，但Web-Harvest里没有这种设置，database的参数里也没有。Google了很久后发现，在链接字符串里可以加入编码设置参数，于是连接字符串加上：</p>

<pre>jdbc:mysql://127.0.0.1:3306/OpinionMonitor<span style="color:#ff0000;">?useUnicode=true&amp;amp;characterEncoding=UTF-8</span></pre>
<p style="text-align:left;">这样就解决了乱码问题。</p>
<p style="text-align:left;">另外，Django连接MySQL很方便，在settings.py里更改DATABASES，再syncdb即可。</p>
<p style="text-align:left;"><strong>（4）问题：把PyMining集成到Django</strong></p>
<p style="text-align:left;">解决：很方便，把conf, data, dict, mining四个文件复制到Project目录下，在App的views.py里加入原先的运行程序，最后加上return HttpResponse(&#8230;)，就可以运行了。</p>
<p style="text-align:left;"><strong>（5）问题：把Web-Harvest集成到Django，并用表单传入爬虫运行参数</strong></p>
<p style="text-align:left;">解决：十分纠结。首先第一个子问题出现了插入数据的问题：</p>

<pre>Incorrect integer value: '' for column 'ReNum' at row 1”</pre>
<p style="text-align:left;">也就是空（‘’）不能插入到integer型字段里。</p>
<p style="text-align:left;">想到的解决方法一，用XQuery自定义函数把空转成0，理应很简单，但是中通不过语法检查，Google了很多样本，按照里面的各种格式不断修改尝试，但还是不行，最终放弃。</p>
<p style="text-align:left;">想到的解决方法二，可能是MySQL的字段不允许为空，或者可能有自动转空为0的设置。但是设置允许为空之后，没有任何变化。Google之后，MySQL的确有转空为0的设置，在my.ini的safe_mode里设置，但奇怪的是，我的XAMPP里的mysql没有这个设置。只能放弃。</p>
<p style="text-align:left;">最后的解决方法：在XQuery的return里加上判断$WeiboReNum != &#8220;&#8221; ，然后修改SQL语句。（依然是笨办法）奇怪的是，新浪微博里居然出了被转发的微博的转发数居然是0的，逻辑不通，但防止报错，改成了更丑陋的代码。如下：</p>

<pre><span style="color:#ff0000;">return</span>	<span style="color:#008000;">if</span> ($Weibo != "" <span style="color:#ff0000;">and</span> $WeiboReNum != "" <span style="color:#ff0000;">and</span> $WeiboRtNum != "")
<span style="color:#008000;">then</span> <span style="color:#0000ff;">concat</span>("insert into monitor_weibo (Weiboer, WeiboerUrl, Weibo, WeiboUrl, ReNum, RtNum, DateTime) values ('", $Weiboer, "', '", $WeiboerUrl, "', '", $Weibo, "', '", $WeiboUrl, "', '", $WeiboReNum, "', '", $WeiboRtNum, "', '", $WeiboDate, "-", $WeiboTime, "'); ")
<span style="color:#008000;">else if</span> ($Weibo != "" <span style="color:#ff0000;">and</span> $WeiboReNum != "" <span style="color:#ff0000;">and</span> $WeiboRtNum = "")
<span style="color:#008000;">then</span> <span style="color:#0000ff;">concat</span>("insert into monitor_weibo (Weiboer, WeiboerUrl, Weibo, WeiboUrl, ReNum, RtNum, DateTime) values ('", $Weiboer, "', '", $WeiboerUrl, "', '", $Weibo, "', '", $WeiboUrl, "', '", $WeiboReNum, "', '", 0, "', '", $WeiboDate, "-", $WeiboTime, "'); ")
<span style="color:#008000;">else if</span> ($Weibo != "" <span style="color:#ff0000;">and</span> $WeiboReNum = "" <span style="color:#ff0000;">and</span> $WeiboRtNum != "")
<span style="color:#008000;">then</span> <span style="color:#0000ff;">concat</span>("insert into monitor_weibo (Weiboer, WeiboerUrl, Weibo, WeiboUrl, ReNum, RtNum, DateTime) values ('", $Weiboer, "', '", $WeiboerUrl, "', '", $Weibo, "', '", $WeiboUrl, "', '",0 , "', '", $WeiboRtNum, "', '", $WeiboDate, "-", $WeiboTime, "'); ")
<span style="color:#008000;">else</span> <span style="color:#0000ff;">concat</span>("insert into monitor_weibo (Weiboer, WeiboerUrl, Weibo, WeiboUrl, ReNum, RtNum, DateTime) values ('", $Weiboer, "', '", $WeiboerUrl, "', '", $Weibo, "', '", $WeiboUrl, "', '", 0, "', '", 0, "', '", $WeiboDate, "-", $WeiboTime, "'); ")</pre>
<p style="text-align:left;">然后第二个子问题是，如何在不用eclipse的情况下，加入classpath，解决方法是在系统的classpath里加入mysql-connector-java-5.1.18-bin.jar与webharvest_all_2.jar。并且在JPype的启动JVM的方法里，加入参数classpath（在加一遍系统参数）。</p>
<p style="text-align:left;">第三个子问题是，JPype传参数到Java类里，一直报错：</p>

<pre>No matching overloads found. at src/native/common/jp_method.cpp:121</pre>
<p style="text-align:left;">看了很多论坛的解答后，发现似乎是实例化的问题，需要构造函数，果然在最早的JavaHello示例中，类里面故意写了一个空的构造函数（可能是为了满足JPype的特殊要求），于是在WebHarvestTest.java里加入了“形式上”的构造函数。经过不断的模仿与尝试，终于成功了。呼呼，颇为纠结。</p>
<p style="text-align:left;">第四个子问题是，JPype只能运行一次，具体说来就是，shutdownJVM之后就不能再startJVM了，而且startJVM之后也不能再startJVM了，不然就报错：</p>

<pre>RuntimeError: Unable to start JVM at src/native/common/jp_env.cpp:54</pre>
<p style="text-align:left;">奇怪的问题，Google中无法发现jpype.isJVMStarted()这个方法，很好，如果判断已经启动，就不再启动了，果然问题解决。</p>

<pre>if not jpype.isJVMStarted():
    startJVM(getDefaultJVMPath(),"classpath")</pre>
<p style="text-align:left;">（问题结束）</p>
<p style="text-align:left;">随着问题的出现，烦恼，解决，心情也是起起伏伏。现在很平静，因为前期的基本问题已经解决，后面却还有更多问题要解决。主要涉及算法的应用与数据的表现，这可能就不是简单的Google几下就能解决的了，但不会像这么纠结在小问题上。</p>
<p style="text-align:left;">（End | by Neil）</p>
<p style="text-align:center;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django学习小记]]></title>
    <link href="http://GingerBear.github.io/blog/2011/11/03/django%25e5%25ad%25a6%25e4%25b9%25a0%25e5%25b0%258f%25e8%25ae%25b0/"/>
    <updated>2011-11-03T00:00:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2011/11/03/django%e5%ad%a6%e4%b9%a0%e5%b0%8f%e8%ae%b0</id>
    <content type="html"><![CDATA[总体来说，看官方的<a href="https://docs.djangoproject.com/en/1.1/intro/" target="_blank">Polls 教程</a>，还是比较清楚的。写个小记，加深记忆。

<a href="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2011/11/bear-vs-snake-deathmatch-2006.jpg"><img class="alignnone size-medium wp-image-15" title="bear-vs-snake-deathmatch-2006" src="http://gingerbear-wordpress.stor.sinaapp.com/uploads/2011/11/bear-vs-snake-deathmatch-2006-300x257.jpg" alt="" width="300" height="257" /></a>

<strong>安装：</strong>

命令行里，在下载文件里运行python setup.py install，自动把Django安装到site-package里。并且把site-packagesdjangobin加入系统PATH。

<strong>建立工程：</strong>

<strong></strong>命令行cd到目录，运行django-admin.py startproject mysite建立名为mysite的工程。里面自动生成四个文件：__init__.py没用到，manage.py执行各种操作，settings.py配置文件，urls处理url。

<strong>配置数据库：</strong>

<strong></strong>修改settings,py里的DATABASES的参数，改了两个：（1）&#8217;ENGINE&#8217;里选sqlite3，（2）‘NAME’里写sqlite.db的地址。因为用的是SQLite，所以其他参数不管。然后运行python manage.py syncdb，意思是按照settings.py里的INSTALLED_APPS来建立数据库。

<strong>建立应用：</strong>

<strong></strong>在工程目录下，命令行运行python manage.py startapp polls建立名为polls的投票应用。里面自动生成四个文件：__init__.py没用到，models.py用类写成的数据库，tests.py没用到，views.py根据urls.py传来的参数，作出相应的操作，然后显示出来。

<strong>创建应用models：</strong>

<strong></strong>在models.py里写两个类（建数据表），并在settings.py里的INSTALLED_APPS加入（称为“注册”更合适）这个应用，完了别忘了运行python manage.py syncdb。Django里还有各种Database API对数据库进行<a href="https://docs.djangoproject.com/en/1.1/intro/tutorial01/#playing-with-the-api" target="_blank">各种操作</a>。

<strong>建立应用的管理后台：</strong>

<strong></strong>实际上是使用Django自带的后台管理应用，方便对数据进行操作。步骤同上：settings.py里注册应用，syncdb，修改urls.py，然后就可以运行了（惊喜）。命令行运行python manage.py runserver，浏览器输入地址可以很不错的管理界面，并且能够<a href="https://docs.djangoproject.com/en/1.1/intro/tutorial02/#make-the-poll-app-modifiable-in-the-admin" target="_blank">定制界面</a>。

<strong>配置应用的url：</strong>

<strong></strong>修改urls.py，主要写url的正则表达式，以及负责接收的view。这里有些技巧（1）在patterns里写规则，减少重复的代码。（2）分开工程的urls.py和应用的urls.py，提高可拓展性。

<strong>建立应用的views：</strong>

<strong></strong>这一步是最花精力的。负责实现应用的逻辑。用def写各种方法，对应url的指示，比如index负责首页显示的东西，detail负责每一次投票（表单）等。通常现实的布局，由views交给templates处理，views只把所以要显示的数据给template，而template则是HTML，布局很容易。

到这一步，一个应用基本上就完成了。其中还有各种减少代码的方法，不一一列出，具体参见<a href="https://docs.djangoproject.com/en/1.1/intro/" target="_blank">官方教程</a>。

（End | by Neil）
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Asia]]></title>
    <link href="http://GingerBear.github.io/blog/2011/10/30/hello-asia/"/>
    <updated>2011-10-30T00:00:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2011/10/30/hello-asia</id>
    <content type="html"><![CDATA[这是我刚刚开启的独立博客，在Sina App Engine的服务下搭建。

&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js和MongoDB]]></title>
    <link href="http://GingerBear.github.io/blog/2011/07/09/node-js%25e5%2592%258cmongodb/"/>
    <updated>2011-07-09T00:00:00-04:00</updated>
    <id>http://GingerBear.github.io/blog/2011/07/09/node-js%e5%92%8cmongodb</id>
    <content type="html"><![CDATA[<p>&nbsp;</p>
<p><strong>Node.js和MongoDB</strong></p>
<p>这是 <a href="http://nodeknockout.com/" target="_blank">Node.js Knockout</a> 系列学习使用<a href="http://nodejs.org/" target="_blank">node.js</a>的第六篇。这篇文章的作者是<a href="http://mongodb.org/" target="_blank">10gen</a>，并从他的博客中<a href="http://blog.mongodb.org/post/812003773/node-js-and-mongodb" target="_blank">转发</a>。</p>
<p><a href="http://www.10gen.com/" target="_blank">10gen</a>是<a href="http://www.mongodb.org/" target="_blank">MongoDB</a>的企业赞助人。MongoDB在键值存储（key-value stores）（高速并且高度可扩展）和传统的关系数据库（提供大量查询和深度功能）之间的缺口上建立了桥梁。</p>
<p><strong>Node 和 MongoDB</strong></p>
<p>Node.js是建立各种实时应用程序（从分析系统到聊天服务器到地理位置追踪服务）的一种框架的选择之一。如果你对于Node还一无所知，请看<a href="http://simonwillison.net/2009/Nov/23/node/" target="_blank">Simon Willson 的出色介绍</a>。如果你已经在使用Node，那么你可能需要一个数据库，并且你正在考虑是否使用MongoDB。</p>
<p>基本原理已经存在。使用Node Javascript意味着MongoDB文件取得了最自然的代表（就如JSON）存在于应用层。在你的应用与MongoDB的外壳（shell）之间存在着很大的一致性，因为外壳是JavaScript的解释器，所以你不必更换语言或者把应用移到数据库里。</p>
<p><strong>Node.js MongodB Driver</strong></p>
<p>在10gen，对于Node.js和MongoDB的支持让我印象非常深刻。首先，有Christian Kvalheim&#8217;s优秀的<a href="http://github.com/christkv/node-mongodb-native" target="_blank">mongodb-node-native项目</a>，一个完全通过JavaScript使用Node.js系统库的无障碍MongoDB驱动。这个项目是与<a href="http://www.mongodb.org/display/DOCS/Ruby+Language+Center" target="_blank">MongoDB Ruby驱动</a>非常接近的端口，使得已经使用的驱动能够轻松转换到10gen支持的驱动。如果你刚刚开始，<a href="http://groups.google.com/group/node-mongodb-native" target="_blank">mongodb-node-native mailing list</a>对你会非常有用。</p>
<p><strong>Hummingbird</strong></p>
<p>需要一个真实的例子吗？看看<a href="http://mnutt.github.com/hummingbird/" target="_blank">Hummingbird</a>吧，Michael Nutt&#8217;s 的实施分析应用。它建立在MongoDB上使用Node.js和mongodb-node-native驱动。Hummingbird是一个用于<a href="http://www.gilt.com/" target="_blank">Gilt Group</a>的产品，使用了一系列给人印象深刻的技术；它使用了<a href="http://expressjs.com/" target="_blank">express.js</a>应用框架，在websockets的帮助下炫耀了一个灵敏的接口。绝对值得一试。</p>
<p><strong>Mongoose</strong></p>
<p>当然，一个使用Node.js的公认困难是关于深奥回收结构。如果你遇到了问题，或者你需要一个更丰富的数据模型库，那么<a href="http://www.learnboost.com/mongoose/" target="_blank">Mongoose</a>就是答案。由<a href="http://www.learnboost.com/" target="_blank">Learnboost</a>创造的Mongoose建立在mongodb-node-native上，为建立你的引用提供了一个优秀的API。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>原文：<a href="http://howtonode.org/node-and-mongo">http://howtonode.org/node-and-mongo</a></p>
]]></content>
  </entry>
  
</feed>
